
hello_usb_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007180  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08007308  08007308  00017308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007390  08007390  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  08007390  08007390  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007390  08007390  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007390  08007390  00017390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007394  08007394  00017394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08007398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cac  20000190  08007528  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e3c  08007528  00021e3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001874f  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000346a  00000000  00000000  0003890f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  0003bd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  0003cbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002907e  00000000  00000000  0003d8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a6a  00000000  00000000  00066946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed13a  00000000  00000000  000783b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001654ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003880  00000000  00000000  00165540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000190 	.word	0x20000190
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080072f0 	.word	0x080072f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000194 	.word	0x20000194
 80001c4:	080072f0 	.word	0x080072f0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9ce 	bl	800056c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f830 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8ca 	bl	800036c <MX_GPIO_Init>
  //MX_USART2_UART_Init();
  MX_USB_DEVICE_Init();
 80001d8:	f006 fa2e 	bl	8006638 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  note_a4_on[0] = 0b10010000;
 80001dc:	4b13      	ldr	r3, [pc, #76]	; (800022c <main+0x64>)
 80001de:	2290      	movs	r2, #144	; 0x90
 80001e0:	701a      	strb	r2, [r3, #0]
  note_a4_on[1] = 0b01000101;
 80001e2:	4b12      	ldr	r3, [pc, #72]	; (800022c <main+0x64>)
 80001e4:	2245      	movs	r2, #69	; 0x45
 80001e6:	705a      	strb	r2, [r3, #1]
  note_a4_on[2] = 0b01100100;
 80001e8:	4b10      	ldr	r3, [pc, #64]	; (800022c <main+0x64>)
 80001ea:	2264      	movs	r2, #100	; 0x64
 80001ec:	709a      	strb	r2, [r3, #2]

  note_a4_off[0] = 0b10000000;
 80001ee:	4b10      	ldr	r3, [pc, #64]	; (8000230 <main+0x68>)
 80001f0:	2280      	movs	r2, #128	; 0x80
 80001f2:	701a      	strb	r2, [r3, #0]
  note_a4_off[1] = 0b01000101;
 80001f4:	4b0e      	ldr	r3, [pc, #56]	; (8000230 <main+0x68>)
 80001f6:	2245      	movs	r2, #69	; 0x45
 80001f8:	705a      	strb	r2, [r3, #1]
  note_a4_off[2] = 0b01100100;
 80001fa:	4b0d      	ldr	r3, [pc, #52]	; (8000230 <main+0x68>)
 80001fc:	2264      	movs	r2, #100	; 0x64
 80001fe:	709a      	strb	r2, [r3, #2]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	//CDC_Transmit_FS((uint8_t*)data, strlen(data));
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000200:	2120      	movs	r1, #32
 8000202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000206:	f000 fd25 	bl	8000c54 <HAL_GPIO_TogglePin>
		CDC_Transmit_FS((uint8_t*)note_a4_on, sizeof(note_a4_on));
 800020a:	2103      	movs	r1, #3
 800020c:	4807      	ldr	r0, [pc, #28]	; (800022c <main+0x64>)
 800020e:	f006 fad1 	bl	80067b4 <CDC_Transmit_FS>
  	HAL_Delay(500);
 8000212:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000216:	f000 fa25 	bl	8000664 <HAL_Delay>
		CDC_Transmit_FS((uint8_t*)note_a4_off, sizeof(note_a4_on));
 800021a:	2103      	movs	r1, #3
 800021c:	4804      	ldr	r0, [pc, #16]	; (8000230 <main+0x68>)
 800021e:	f006 fac9 	bl	80067b4 <CDC_Transmit_FS>
  	HAL_Delay(500);
 8000222:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000226:	f000 fa1d 	bl	8000664 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800022a:	e7e9      	b.n	8000200 <main+0x38>
 800022c:	200003d0 	.word	0x200003d0
 8000230:	20000458 	.word	0x20000458

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b0b8      	sub	sp, #224	; 0xe0
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800023e:	2244      	movs	r2, #68	; 0x44
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f007 f84c 	bl	80072e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]
 8000254:	60da      	str	r2, [r3, #12]
 8000256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000258:	463b      	mov	r3, r7
 800025a:	2288      	movs	r2, #136	; 0x88
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f007 f83e 	bl	80072e0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000264:	f001 fed0 	bl	8002008 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000268:	4b3f      	ldr	r3, [pc, #252]	; (8000368 <SystemClock_Config+0x134>)
 800026a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800026e:	4a3e      	ldr	r2, [pc, #248]	; (8000368 <SystemClock_Config+0x134>)
 8000270:	f023 0318 	bic.w	r3, r3, #24
 8000274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000278:	2314      	movs	r3, #20
 800027a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800027e:	2301      	movs	r3, #1
 8000280:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000284:	2301      	movs	r3, #1
 8000286:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000290:	2360      	movs	r3, #96	; 0x60
 8000292:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000296:	2302      	movs	r3, #2
 8000298:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800029c:	2301      	movs	r3, #1
 800029e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002a2:	2301      	movs	r3, #1
 80002a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 16;
 80002a8:	2310      	movs	r3, #16
 80002aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002ae:	2307      	movs	r3, #7
 80002b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002b4:	2302      	movs	r3, #2
 80002b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ba:	2302      	movs	r3, #2
 80002bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80002c4:	4618      	mov	r0, r3
 80002c6:	f001 ff23 	bl	8002110 <HAL_RCC_OscConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80002d0:	f000 f8b2 	bl	8000438 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d4:	230f      	movs	r3, #15
 80002d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002da:	2303      	movs	r3, #3
 80002dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80002f6:	2101      	movs	r1, #1
 80002f8:	4618      	mov	r0, r3
 80002fa:	f002 fae3 	bl	80028c4 <HAL_RCC_ClockConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000304:	f000 f898 	bl	8000438 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB;
 8000308:	f242 0302 	movw	r3, #8194	; 0x2002
 800030c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800030e:	2300      	movs	r3, #0
 8000310:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000312:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000316:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000318:	2301      	movs	r3, #1
 800031a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800031c:	2301      	movs	r3, #1
 800031e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000320:	2318      	movs	r3, #24
 8000322:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000324:	2307      	movs	r3, #7
 8000326:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000328:	2302      	movs	r3, #2
 800032a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800032c:	2302      	movs	r3, #2
 800032e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000330:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000334:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000336:	463b      	mov	r3, r7
 8000338:	4618      	mov	r0, r3
 800033a:	f002 fcbb 	bl	8002cb4 <HAL_RCCEx_PeriphCLKConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000344:	f000 f878 	bl	8000438 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000348:	f44f 7000 	mov.w	r0, #512	; 0x200
 800034c:	f001 fe7a 	bl	8002044 <HAL_PWREx_ControlVoltageScaling>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x126>
  {
    Error_Handler();
 8000356:	f000 f86f 	bl	8000438 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800035a:	f002 ff95 	bl	8003288 <HAL_RCCEx_EnableMSIPLLMode>
}
 800035e:	bf00      	nop
 8000360:	37e0      	adds	r7, #224	; 0xe0
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b08a      	sub	sp, #40	; 0x28
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	f107 0314 	add.w	r3, r7, #20
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000382:	4b2b      	ldr	r3, [pc, #172]	; (8000430 <MX_GPIO_Init+0xc4>)
 8000384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000386:	4a2a      	ldr	r2, [pc, #168]	; (8000430 <MX_GPIO_Init+0xc4>)
 8000388:	f043 0304 	orr.w	r3, r3, #4
 800038c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800038e:	4b28      	ldr	r3, [pc, #160]	; (8000430 <MX_GPIO_Init+0xc4>)
 8000390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000392:	f003 0304 	and.w	r3, r3, #4
 8000396:	613b      	str	r3, [r7, #16]
 8000398:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800039a:	4b25      	ldr	r3, [pc, #148]	; (8000430 <MX_GPIO_Init+0xc4>)
 800039c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039e:	4a24      	ldr	r2, [pc, #144]	; (8000430 <MX_GPIO_Init+0xc4>)
 80003a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003a6:	4b22      	ldr	r3, [pc, #136]	; (8000430 <MX_GPIO_Init+0xc4>)
 80003a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b2:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <MX_GPIO_Init+0xc4>)
 80003b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b6:	4a1e      	ldr	r2, [pc, #120]	; (8000430 <MX_GPIO_Init+0xc4>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003be:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <MX_GPIO_Init+0xc4>)
 80003c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	60bb      	str	r3, [r7, #8]
 80003c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ca:	4b19      	ldr	r3, [pc, #100]	; (8000430 <MX_GPIO_Init+0xc4>)
 80003cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ce:	4a18      	ldr	r2, [pc, #96]	; (8000430 <MX_GPIO_Init+0xc4>)
 80003d0:	f043 0302 	orr.w	r3, r3, #2
 80003d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003d6:	4b16      	ldr	r3, [pc, #88]	; (8000430 <MX_GPIO_Init+0xc4>)
 80003d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003da:	f003 0302 	and.w	r3, r3, #2
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2120      	movs	r1, #32
 80003e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ea:	f000 fc1b 	bl	8000c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003fe:	f107 0314 	add.w	r3, r7, #20
 8000402:	4619      	mov	r1, r3
 8000404:	480b      	ldr	r0, [pc, #44]	; (8000434 <MX_GPIO_Init+0xc8>)
 8000406:	f000 fa63 	bl	80008d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800040a:	2320      	movs	r3, #32
 800040c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040e:	2301      	movs	r3, #1
 8000410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	2300      	movs	r3, #0
 8000414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000416:	2300      	movs	r3, #0
 8000418:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800041a:	f107 0314 	add.w	r3, r7, #20
 800041e:	4619      	mov	r1, r3
 8000420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000424:	f000 fa54 	bl	80008d0 <HAL_GPIO_Init>

}
 8000428:	bf00      	nop
 800042a:	3728      	adds	r7, #40	; 0x28
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40021000 	.word	0x40021000
 8000434:	48000800 	.word	0x48000800

08000438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800043c:	b672      	cpsid	i
}
 800043e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000440:	e7fe      	b.n	8000440 <Error_Handler+0x8>
	...

08000444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <HAL_MspInit+0x44>)
 800044c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800044e:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <HAL_MspInit+0x44>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6613      	str	r3, [r2, #96]	; 0x60
 8000456:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <HAL_MspInit+0x44>)
 8000458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <HAL_MspInit+0x44>)
 8000464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000466:	4a08      	ldr	r2, [pc, #32]	; (8000488 <HAL_MspInit+0x44>)
 8000468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800046c:	6593      	str	r3, [r2, #88]	; 0x58
 800046e:	4b06      	ldr	r3, [pc, #24]	; (8000488 <HAL_MspInit+0x44>)
 8000470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000476:	603b      	str	r3, [r7, #0]
 8000478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000

0800048c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000490:	e7fe      	b.n	8000490 <NMI_Handler+0x4>

08000492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000496:	e7fe      	b.n	8000496 <HardFault_Handler+0x4>

08000498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800049c:	e7fe      	b.n	800049c <MemManage_Handler+0x4>

0800049e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <BusFault_Handler+0x4>

080004a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <UsageFault_Handler+0x4>

080004aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d8:	f000 f8a4 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80004e4:	4802      	ldr	r0, [pc, #8]	; (80004f0 <OTG_FS_IRQHandler+0x10>)
 80004e6:	f000 fd22 	bl	8000f2e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20001930 	.word	0x20001930

080004f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <SystemInit+0x20>)
 80004fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004fe:	4a05      	ldr	r2, [pc, #20]	; (8000514 <SystemInit+0x20>)
 8000500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	e000ed00 	.word	0xe000ed00

08000518 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000550 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800051c:	f7ff ffea 	bl	80004f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <LoopForever+0x6>)
  ldr r1, =_edata
 8000522:	490d      	ldr	r1, [pc, #52]	; (8000558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000524:	4a0d      	ldr	r2, [pc, #52]	; (800055c <LoopForever+0xe>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000538:	4c0a      	ldr	r4, [pc, #40]	; (8000564 <LoopForever+0x16>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000546:	f006 fea7 	bl	8007298 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800054a:	f7ff fe3d 	bl	80001c8 <main>

0800054e <LoopForever>:

LoopForever:
    b LoopForever
 800054e:	e7fe      	b.n	800054e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000550:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 800055c:	08007398 	.word	0x08007398
  ldr r2, =_sbss
 8000560:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000564:	20001e3c 	.word	0x20001e3c

08000568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC1_2_IRQHandler>
	...

0800056c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000572:	2300      	movs	r3, #0
 8000574:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <HAL_Init+0x3c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <HAL_Init+0x3c>)
 800057c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000580:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000582:	2003      	movs	r0, #3
 8000584:	f000 f962 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000588:	2000      	movs	r0, #0
 800058a:	f000 f80f 	bl	80005ac <HAL_InitTick>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d002      	beq.n	800059a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000594:	2301      	movs	r3, #1
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	e001      	b.n	800059e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800059a:	f7ff ff53 	bl	8000444 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800059e:	79fb      	ldrb	r3, [r7, #7]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40022000 	.word	0x40022000

080005ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005b4:	2300      	movs	r3, #0
 80005b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005b8:	4b17      	ldr	r3, [pc, #92]	; (8000618 <HAL_InitTick+0x6c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d023      	beq.n	8000608 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005c0:	4b16      	ldr	r3, [pc, #88]	; (800061c <HAL_InitTick+0x70>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <HAL_InitTick+0x6c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4619      	mov	r1, r3
 80005ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80005d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f96d 	bl	80008b6 <HAL_SYSTICK_Config>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d10f      	bne.n	8000602 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	d809      	bhi.n	80005fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e8:	2200      	movs	r2, #0
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005f0:	f000 f937 	bl	8000862 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005f4:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <HAL_InitTick+0x74>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]
 80005fa:	e007      	b.n	800060c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80005fc:	2301      	movs	r3, #1
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e004      	b.n	800060c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	73fb      	strb	r3, [r7, #15]
 8000606:	e001      	b.n	800060c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000608:	2301      	movs	r3, #1
 800060a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800060c:	7bfb      	ldrb	r3, [r7, #15]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000008 	.word	0x20000008
 800061c:	20000000 	.word	0x20000000
 8000620:	20000004 	.word	0x20000004

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000008 	.word	0x20000008
 8000648:	2000045c 	.word	0x2000045c

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	2000045c 	.word	0x2000045c

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <HAL_Delay+0x44>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000008 	.word	0x20000008

080006ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c8:	4013      	ands	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006de:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	60d3      	str	r3, [r2, #12]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <__NVIC_GetPriorityGrouping+0x18>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	f003 0307 	and.w	r3, r3, #7
}
 8000702:	4618      	mov	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db0b      	blt.n	800073a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	f003 021f 	and.w	r2, r3, #31
 8000728:	4907      	ldr	r1, [pc, #28]	; (8000748 <__NVIC_EnableIRQ+0x38>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	095b      	lsrs	r3, r3, #5
 8000730:	2001      	movs	r0, #1
 8000732:	fa00 f202 	lsl.w	r2, r0, r2
 8000736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e100 	.word	0xe000e100

0800074c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	db0a      	blt.n	8000776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	490c      	ldr	r1, [pc, #48]	; (8000798 <__NVIC_SetPriority+0x4c>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	0112      	lsls	r2, r2, #4
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	440b      	add	r3, r1
 8000770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000774:	e00a      	b.n	800078c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4908      	ldr	r1, [pc, #32]	; (800079c <__NVIC_SetPriority+0x50>)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	3b04      	subs	r3, #4
 8000784:	0112      	lsls	r2, r2, #4
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	440b      	add	r3, r1
 800078a:	761a      	strb	r2, [r3, #24]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000e100 	.word	0xe000e100
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f1c3 0307 	rsb	r3, r3, #7
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	bf28      	it	cs
 80007be:	2304      	movcs	r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3304      	adds	r3, #4
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d902      	bls.n	80007d0 <NVIC_EncodePriority+0x30>
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3b03      	subs	r3, #3
 80007ce:	e000      	b.n	80007d2 <NVIC_EncodePriority+0x32>
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43da      	mvns	r2, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	401a      	ands	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43d9      	mvns	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	4313      	orrs	r3, r2
         );
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3724      	adds	r7, #36	; 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000818:	d301      	bcc.n	800081e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081a:	2301      	movs	r3, #1
 800081c:	e00f      	b.n	800083e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <SysTick_Config+0x40>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000826:	210f      	movs	r1, #15
 8000828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800082c:	f7ff ff8e 	bl	800074c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <SysTick_Config+0x40>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <SysTick_Config+0x40>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010

0800084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff29 	bl	80006ac <__NVIC_SetPriorityGrouping>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff3e 	bl	80006f4 <__NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff8e 	bl	80007a0 <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5d 	bl	800074c <__NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff31 	bl	8000710 <__NVIC_EnableIRQ>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ffa2 	bl	8000808 <SysTick_Config>
 80008c4:	4603      	mov	r3, r0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008de:	e17f      	b.n	8000be0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	2101      	movs	r1, #1
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ec:	4013      	ands	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	f000 8171 	beq.w	8000bda <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f003 0303 	and.w	r3, r3, #3
 8000900:	2b01      	cmp	r3, #1
 8000902:	d005      	beq.n	8000910 <HAL_GPIO_Init+0x40>
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	f003 0303 	and.w	r3, r3, #3
 800090c:	2b02      	cmp	r3, #2
 800090e:	d130      	bne.n	8000972 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	2203      	movs	r2, #3
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	43db      	mvns	r3, r3
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	4013      	ands	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68da      	ldr	r2, [r3, #12]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4313      	orrs	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000946:	2201      	movs	r2, #1
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4013      	ands	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	091b      	lsrs	r3, r3, #4
 800095c:	f003 0201 	and.w	r2, r3, #1
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4313      	orrs	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f003 0303 	and.w	r3, r3, #3
 800097a:	2b03      	cmp	r3, #3
 800097c:	d118      	bne.n	80009b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000982:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000984:	2201      	movs	r2, #1
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	4013      	ands	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	08db      	lsrs	r3, r3, #3
 800099a:	f003 0201 	and.w	r2, r3, #1
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f003 0303 	and.w	r3, r3, #3
 80009b8:	2b03      	cmp	r3, #3
 80009ba:	d017      	beq.n	80009ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	2203      	movs	r2, #3
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4013      	ands	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	689a      	ldr	r2, [r3, #8]
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f003 0303 	and.w	r3, r3, #3
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d123      	bne.n	8000a40 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	08da      	lsrs	r2, r3, #3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3208      	adds	r2, #8
 8000a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	f003 0307 	and.w	r3, r3, #7
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	220f      	movs	r2, #15
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	43db      	mvns	r3, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	691a      	ldr	r2, [r3, #16]
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	08da      	lsrs	r2, r3, #3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3208      	adds	r2, #8
 8000a3a:	6939      	ldr	r1, [r7, #16]
 8000a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	43db      	mvns	r3, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f003 0203 	and.w	r2, r3, #3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	f000 80ac 	beq.w	8000bda <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	4b5f      	ldr	r3, [pc, #380]	; (8000c00 <HAL_GPIO_Init+0x330>)
 8000a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a86:	4a5e      	ldr	r2, [pc, #376]	; (8000c00 <HAL_GPIO_Init+0x330>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8e:	4b5c      	ldr	r3, [pc, #368]	; (8000c00 <HAL_GPIO_Init+0x330>)
 8000a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a9a:	4a5a      	ldr	r2, [pc, #360]	; (8000c04 <HAL_GPIO_Init+0x334>)
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	f003 0303 	and.w	r3, r3, #3
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	220f      	movs	r2, #15
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ac4:	d025      	beq.n	8000b12 <HAL_GPIO_Init+0x242>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a4f      	ldr	r2, [pc, #316]	; (8000c08 <HAL_GPIO_Init+0x338>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d01f      	beq.n	8000b0e <HAL_GPIO_Init+0x23e>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a4e      	ldr	r2, [pc, #312]	; (8000c0c <HAL_GPIO_Init+0x33c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d019      	beq.n	8000b0a <HAL_GPIO_Init+0x23a>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a4d      	ldr	r2, [pc, #308]	; (8000c10 <HAL_GPIO_Init+0x340>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d013      	beq.n	8000b06 <HAL_GPIO_Init+0x236>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a4c      	ldr	r2, [pc, #304]	; (8000c14 <HAL_GPIO_Init+0x344>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d00d      	beq.n	8000b02 <HAL_GPIO_Init+0x232>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a4b      	ldr	r2, [pc, #300]	; (8000c18 <HAL_GPIO_Init+0x348>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d007      	beq.n	8000afe <HAL_GPIO_Init+0x22e>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a4a      	ldr	r2, [pc, #296]	; (8000c1c <HAL_GPIO_Init+0x34c>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d101      	bne.n	8000afa <HAL_GPIO_Init+0x22a>
 8000af6:	2306      	movs	r3, #6
 8000af8:	e00c      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000afa:	2307      	movs	r3, #7
 8000afc:	e00a      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000afe:	2305      	movs	r3, #5
 8000b00:	e008      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000b02:	2304      	movs	r3, #4
 8000b04:	e006      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000b06:	2303      	movs	r3, #3
 8000b08:	e004      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	e002      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e000      	b.n	8000b14 <HAL_GPIO_Init+0x244>
 8000b12:	2300      	movs	r3, #0
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	f002 0203 	and.w	r2, r2, #3
 8000b1a:	0092      	lsls	r2, r2, #2
 8000b1c:	4093      	lsls	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b24:	4937      	ldr	r1, [pc, #220]	; (8000c04 <HAL_GPIO_Init+0x334>)
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	089b      	lsrs	r3, r3, #2
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b32:	4b3b      	ldr	r3, [pc, #236]	; (8000c20 <HAL_GPIO_Init+0x350>)
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b56:	4a32      	ldr	r2, [pc, #200]	; (8000c20 <HAL_GPIO_Init+0x350>)
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b5c:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <HAL_GPIO_Init+0x350>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b80:	4a27      	ldr	r2, [pc, #156]	; (8000c20 <HAL_GPIO_Init+0x350>)
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b86:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <HAL_GPIO_Init+0x350>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000baa:	4a1d      	ldr	r2, [pc, #116]	; (8000c20 <HAL_GPIO_Init+0x350>)
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <HAL_GPIO_Init+0x350>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bd4:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <HAL_GPIO_Init+0x350>)
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f47f ae78 	bne.w	80008e0 <HAL_GPIO_Init+0x10>
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	371c      	adds	r7, #28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010000 	.word	0x40010000
 8000c08:	48000400 	.word	0x48000400
 8000c0c:	48000800 	.word	0x48000800
 8000c10:	48000c00 	.word	0x48000c00
 8000c14:	48001000 	.word	0x48001000
 8000c18:	48001400 	.word	0x48001400
 8000c1c:	48001800 	.word	0x48001800
 8000c20:	40010400 	.word	0x40010400

08000c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	807b      	strh	r3, [r7, #2]
 8000c30:	4613      	mov	r3, r2
 8000c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c34:	787b      	ldrb	r3, [r7, #1]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c3a:	887a      	ldrh	r2, [r7, #2]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c40:	e002      	b.n	8000c48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c42:	887a      	ldrh	r2, [r7, #2]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c66:	887a      	ldrh	r2, [r7, #2]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	041a      	lsls	r2, r3, #16
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	43d9      	mvns	r1, r3
 8000c72:	887b      	ldrh	r3, [r7, #2]
 8000c74:	400b      	ands	r3, r1
 8000c76:	431a      	orrs	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	619a      	str	r2, [r3, #24]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8a:	b08f      	sub	sp, #60	; 0x3c
 8000c8c:	af0a      	add	r7, sp, #40	; 0x28
 8000c8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e116      	b.n	8000ec8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d106      	bne.n	8000cba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f005 fed7 	bl	8006a68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d102      	bne.n	8000cd4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f002 fd90 	bl	80037fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	687e      	ldr	r6, [r7, #4]
 8000ce6:	466d      	mov	r5, sp
 8000ce8:	f106 0410 	add.w	r4, r6, #16
 8000cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cf8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cfc:	1d33      	adds	r3, r6, #4
 8000cfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d00:	6838      	ldr	r0, [r7, #0]
 8000d02:	f002 fca3 	bl	800364c <USB_CoreInit>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d005      	beq.n	8000d18 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2202      	movs	r2, #2
 8000d10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e0d7      	b.n	8000ec8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f002 fd7e 	bl	8003820 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]
 8000d28:	e04a      	b.n	8000dc0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d2a:	7bfa      	ldrb	r2, [r7, #15]
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	4413      	add	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	440b      	add	r3, r1
 8000d38:	333d      	adds	r3, #61	; 0x3d
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000d3e:	7bfa      	ldrb	r2, [r7, #15]
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	4613      	mov	r3, r2
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4413      	add	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	333c      	adds	r3, #60	; 0x3c
 8000d4e:	7bfa      	ldrb	r2, [r7, #15]
 8000d50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d52:	7bfa      	ldrb	r2, [r7, #15]
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	b298      	uxth	r0, r3
 8000d58:	6879      	ldr	r1, [r7, #4]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	4413      	add	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	440b      	add	r3, r1
 8000d64:	3344      	adds	r3, #68	; 0x44
 8000d66:	4602      	mov	r2, r0
 8000d68:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d6a:	7bfa      	ldrb	r2, [r7, #15]
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	4413      	add	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	440b      	add	r3, r1
 8000d78:	3340      	adds	r3, #64	; 0x40
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d7e:	7bfa      	ldrb	r2, [r7, #15]
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	4613      	mov	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	4413      	add	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	3348      	adds	r3, #72	; 0x48
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d92:	7bfa      	ldrb	r2, [r7, #15]
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	4613      	mov	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	4413      	add	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	440b      	add	r3, r1
 8000da0:	334c      	adds	r3, #76	; 0x4c
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000da6:	7bfa      	ldrb	r2, [r7, #15]
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	4613      	mov	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	4413      	add	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	440b      	add	r3, r1
 8000db4:	3354      	adds	r3, #84	; 0x54
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	7bfa      	ldrb	r2, [r7, #15]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d3af      	bcc.n	8000d2a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	73fb      	strb	r3, [r7, #15]
 8000dce:	e044      	b.n	8000e5a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000dd0:	7bfa      	ldrb	r2, [r7, #15]
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	4413      	add	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	440b      	add	r3, r1
 8000dde:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000de6:	7bfa      	ldrb	r2, [r7, #15]
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	4613      	mov	r3, r2
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	4413      	add	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	440b      	add	r3, r1
 8000df4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000df8:	7bfa      	ldrb	r2, [r7, #15]
 8000dfa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000dfc:	7bfa      	ldrb	r2, [r7, #15]
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	4613      	mov	r3, r2
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	4413      	add	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	440b      	add	r3, r1
 8000e0a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e12:	7bfa      	ldrb	r2, [r7, #15]
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	4613      	mov	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	4413      	add	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e28:	7bfa      	ldrb	r2, [r7, #15]
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	4413      	add	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	440b      	add	r3, r1
 8000e36:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e3e:	7bfa      	ldrb	r2, [r7, #15]
 8000e40:	6879      	ldr	r1, [r7, #4]
 8000e42:	4613      	mov	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	4413      	add	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	3301      	adds	r3, #1
 8000e58:	73fb      	strb	r3, [r7, #15]
 8000e5a:	7bfa      	ldrb	r2, [r7, #15]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d3b5      	bcc.n	8000dd0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	603b      	str	r3, [r7, #0]
 8000e6a:	687e      	ldr	r6, [r7, #4]
 8000e6c:	466d      	mov	r5, sp
 8000e6e:	f106 0410 	add.w	r4, r6, #16
 8000e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e82:	1d33      	adds	r3, r6, #4
 8000e84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e86:	6838      	ldr	r0, [r7, #0]
 8000e88:	f002 fd16 	bl	80038b8 <USB_DevInit>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d005      	beq.n	8000e9e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2202      	movs	r2, #2
 8000e96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e014      	b.n	8000ec8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d102      	bne.n	8000ebc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f001 f882 	bl	8001fc0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f003 fd9e 	bl	8004a02 <USB_DevDisconnect>

  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ed0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d101      	bne.n	8000eec <HAL_PCD_Start+0x1c>
 8000ee8:	2302      	movs	r3, #2
 8000eea:	e01c      	b.n	8000f26 <HAL_PCD_Start+0x56>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d105      	bne.n	8000f08 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f002 fc65 	bl	80037dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 fd52 	bl	80049c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f2e:	b590      	push	{r4, r7, lr}
 8000f30:	b08d      	sub	sp, #52	; 0x34
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000f3c:	6a3b      	ldr	r3, [r7, #32]
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f003 fe10 	bl	8004b6a <USB_GetMode>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f040 847e 	bne.w	800184e <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 fd74 	bl	8004a44 <USB_ReadInterrupts>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 8474 	beq.w	800184c <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f003 fd61 	bl	8004a44 <USB_ReadInterrupts>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d107      	bne.n	8000f9c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	695a      	ldr	r2, [r3, #20]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f002 0202 	and.w	r2, r2, #2
 8000f9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f003 fd4f 	bl	8004a44 <USB_ReadInterrupts>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	f003 0310 	and.w	r3, r3, #16
 8000fac:	2b10      	cmp	r3, #16
 8000fae:	d161      	bne.n	8001074 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	699a      	ldr	r2, [r3, #24]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0210 	bic.w	r2, r2, #16
 8000fbe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	f003 020f 	and.w	r2, r3, #15
 8000fcc:	4613      	mov	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	4413      	add	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	4413      	add	r3, r2
 8000fdc:	3304      	adds	r3, #4
 8000fde:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	0c5b      	lsrs	r3, r3, #17
 8000fe4:	f003 030f 	and.w	r3, r3, #15
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d124      	bne.n	8001036 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d035      	beq.n	8001064 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	091b      	lsrs	r3, r3, #4
 8001000:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001002:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001006:	b29b      	uxth	r3, r3
 8001008:	461a      	mov	r2, r3
 800100a:	6a38      	ldr	r0, [r7, #32]
 800100c:	f003 fb86 	bl	800471c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	691a      	ldr	r2, [r3, #16]
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	091b      	lsrs	r3, r3, #4
 8001018:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800101c:	441a      	add	r2, r3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	6a1a      	ldr	r2, [r3, #32]
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	091b      	lsrs	r3, r3, #4
 800102a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800102e:	441a      	add	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	621a      	str	r2, [r3, #32]
 8001034:	e016      	b.n	8001064 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	0c5b      	lsrs	r3, r3, #17
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	2b06      	cmp	r3, #6
 8001040:	d110      	bne.n	8001064 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001048:	2208      	movs	r2, #8
 800104a:	4619      	mov	r1, r3
 800104c:	6a38      	ldr	r0, [r7, #32]
 800104e:	f003 fb65 	bl	800471c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	6a1a      	ldr	r2, [r3, #32]
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	091b      	lsrs	r3, r3, #4
 800105a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800105e:	441a      	add	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	699a      	ldr	r2, [r3, #24]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0210 	orr.w	r2, r2, #16
 8001072:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f003 fce3 	bl	8004a44 <USB_ReadInterrupts>
 800107e:	4603      	mov	r3, r0
 8001080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001084:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001088:	f040 80a7 	bne.w	80011da <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f003 fce8 	bl	8004a6a <USB_ReadDevAllOutEpInterrupt>
 800109a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800109c:	e099      	b.n	80011d2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800109e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 808e 	beq.w	80011c6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f003 fd0c 	bl	8004ad2 <USB_ReadDevOutEPInterrupt>
 80010ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00c      	beq.n	80010e0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	015a      	lsls	r2, r3, #5
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	4413      	add	r3, r2
 80010ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80010d2:	461a      	mov	r2, r3
 80010d4:	2301      	movs	r3, #1
 80010d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80010d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 fe96 	bl	8001e0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d00c      	beq.n	8001104 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	015a      	lsls	r2, r3, #5
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	4413      	add	r3, r2
 80010f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80010f6:	461a      	mov	r2, r3
 80010f8:	2308      	movs	r3, #8
 80010fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80010fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 fed2 	bl	8001ea8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	2b00      	cmp	r3, #0
 800110c:	d008      	beq.n	8001120 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	015a      	lsls	r2, r3, #5
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	4413      	add	r3, r2
 8001116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800111a:	461a      	mov	r2, r3
 800111c:	2310      	movs	r3, #16
 800111e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d030      	beq.n	800118c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800112a:	6a3b      	ldr	r3, [r7, #32]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001132:	2b80      	cmp	r3, #128	; 0x80
 8001134:	d109      	bne.n	800114a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	69fa      	ldr	r2, [r7, #28]
 8001140:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001144:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001148:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800114a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800114c:	4613      	mov	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4413      	add	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	3304      	adds	r3, #4
 800115e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	78db      	ldrb	r3, [r3, #3]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d108      	bne.n	800117a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	2200      	movs	r2, #0
 800116c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4619      	mov	r1, r3
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f005 fd9f 	bl	8006cb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	015a      	lsls	r2, r3, #5
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	4413      	add	r3, r2
 8001182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001186:	461a      	mov	r2, r3
 8001188:	2302      	movs	r3, #2
 800118a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	f003 0320 	and.w	r3, r3, #32
 8001192:	2b00      	cmp	r3, #0
 8001194:	d008      	beq.n	80011a8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	015a      	lsls	r2, r3, #5
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	4413      	add	r3, r2
 800119e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011a2:	461a      	mov	r2, r3
 80011a4:	2320      	movs	r3, #32
 80011a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d009      	beq.n	80011c6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	015a      	lsls	r2, r3, #5
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	4413      	add	r3, r2
 80011ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011be:	461a      	mov	r2, r3
 80011c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	3301      	adds	r3, #1
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80011cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ce:	085b      	lsrs	r3, r3, #1
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80011d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f47f af62 	bne.w	800109e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f003 fc30 	bl	8004a44 <USB_ReadInterrupts>
 80011e4:	4603      	mov	r3, r0
 80011e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80011ee:	f040 80a4 	bne.w	800133a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 fc51 	bl	8004a9e <USB_ReadDevAllInEpInterrupt>
 80011fc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001202:	e096      	b.n	8001332 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 808b 	beq.w	8001326 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f003 fc77 	bl	8004b0e <USB_ReadDevInEPInterrupt>
 8001220:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d020      	beq.n	800126e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	2201      	movs	r2, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	43db      	mvns	r3, r3
 8001246:	69f9      	ldr	r1, [r7, #28]
 8001248:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800124c:	4013      	ands	r3, r2
 800124e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	015a      	lsls	r2, r3, #5
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	4413      	add	r3, r2
 8001258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800125c:	461a      	mov	r2, r3
 800125e:	2301      	movs	r3, #1
 8001260:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	b2db      	uxtb	r3, r3
 8001266:	4619      	mov	r1, r3
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f005 fc90 	bl	8006b8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	2b00      	cmp	r3, #0
 8001276:	d008      	beq.n	800128a <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	015a      	lsls	r2, r3, #5
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	4413      	add	r3, r2
 8001280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001284:	461a      	mov	r2, r3
 8001286:	2308      	movs	r3, #8
 8001288:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	2b00      	cmp	r3, #0
 8001292:	d008      	beq.n	80012a6 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	015a      	lsls	r2, r3, #5
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	4413      	add	r3, r2
 800129c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012a0:	461a      	mov	r2, r3
 80012a2:	2310      	movs	r3, #16
 80012a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d008      	beq.n	80012c2 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	015a      	lsls	r2, r3, #5
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	4413      	add	r3, r2
 80012b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012bc:	461a      	mov	r2, r3
 80012be:	2340      	movs	r3, #64	; 0x40
 80012c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d023      	beq.n	8001314 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80012cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ce:	6a38      	ldr	r0, [r7, #32]
 80012d0:	f002 fc3e 	bl	8003b50 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80012d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012d6:	4613      	mov	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	4413      	add	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	3338      	adds	r3, #56	; 0x38
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	4413      	add	r3, r2
 80012e4:	3304      	adds	r3, #4
 80012e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	78db      	ldrb	r3, [r3, #3]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d108      	bne.n	8001302 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	2200      	movs	r2, #0
 80012f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4619      	mov	r1, r3
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f005 fced 	bl	8006cdc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	015a      	lsls	r2, r3, #5
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	4413      	add	r3, r2
 800130a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800130e:	461a      	mov	r2, r3
 8001310:	2302      	movs	r3, #2
 8001312:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800131e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 fcea 	bl	8001cfa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	3301      	adds	r3, #1
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800132c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132e:	085b      	lsrs	r3, r3, #1
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001334:	2b00      	cmp	r3, #0
 8001336:	f47f af65 	bne.w	8001204 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f003 fb80 	bl	8004a44 <USB_ReadInterrupts>
 8001344:	4603      	mov	r3, r0
 8001346:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800134a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800134e:	d122      	bne.n	8001396 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800135e:	f023 0301 	bic.w	r3, r3, #1
 8001362:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800136a:	2b01      	cmp	r3, #1
 800136c:	d108      	bne.n	8001380 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001376:	2100      	movs	r1, #0
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f005 ff21 	bl	80071c0 <HAL_PCDEx_LPM_Callback>
 800137e:	e002      	b.n	8001386 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f005 fc71 	bl	8006c68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	695a      	ldr	r2, [r3, #20]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001394:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f003 fb52 	bl	8004a44 <USB_ReadInterrupts>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013aa:	d112      	bne.n	80013d2 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d102      	bne.n	80013c2 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f005 fc2d 	bl	8006c1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	695a      	ldr	r2, [r3, #20]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80013d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 fb34 	bl	8004a44 <USB_ReadInterrupts>
 80013dc:	4603      	mov	r3, r0
 80013de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80013e6:	d121      	bne.n	800142c <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	695a      	ldr	r2, [r3, #20]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80013f6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d111      	bne.n	8001426 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	f003 020f 	and.w	r2, r3, #15
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800141c:	2101      	movs	r1, #1
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f005 fece 	bl	80071c0 <HAL_PCDEx_LPM_Callback>
 8001424:	e002      	b.n	800142c <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f005 fbf8 	bl	8006c1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f003 fb07 	bl	8004a44 <USB_ReadInterrupts>
 8001436:	4603      	mov	r3, r0
 8001438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800143c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001440:	f040 80b5 	bne.w	80015ae <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	69fa      	ldr	r2, [r7, #28]
 800144e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001452:	f023 0301 	bic.w	r3, r3, #1
 8001456:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2110      	movs	r1, #16
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fb76 	bl	8003b50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001464:	2300      	movs	r3, #0
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001468:	e046      	b.n	80014f8 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800146a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146c:	015a      	lsls	r2, r3, #5
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	4413      	add	r3, r2
 8001472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001476:	461a      	mov	r2, r3
 8001478:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800147c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800147e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001480:	015a      	lsls	r2, r3, #5
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	4413      	add	r3, r2
 8001486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800148e:	0151      	lsls	r1, r2, #5
 8001490:	69fa      	ldr	r2, [r7, #28]
 8001492:	440a      	add	r2, r1
 8001494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001498:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800149c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800149e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a0:	015a      	lsls	r2, r3, #5
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	4413      	add	r3, r2
 80014a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014aa:	461a      	mov	r2, r3
 80014ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80014b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80014b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b4:	015a      	lsls	r2, r3, #5
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	4413      	add	r3, r2
 80014ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014c2:	0151      	lsls	r1, r2, #5
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	440a      	add	r2, r1
 80014c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80014cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80014d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80014d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d4:	015a      	lsls	r2, r3, #5
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	4413      	add	r3, r2
 80014da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014e2:	0151      	lsls	r1, r2, #5
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	440a      	add	r2, r1
 80014e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80014ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80014f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f4:	3301      	adds	r3, #1
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014fe:	429a      	cmp	r2, r3
 8001500:	d3b3      	bcc.n	800146a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001510:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001514:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	2b00      	cmp	r3, #0
 800151c:	d016      	beq.n	800154c <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800152e:	f043 030b 	orr.w	r3, r3, #11
 8001532:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	69fa      	ldr	r2, [r7, #28]
 8001540:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001544:	f043 030b 	orr.w	r3, r3, #11
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	e015      	b.n	8001578 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	69fa      	ldr	r2, [r7, #28]
 8001556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800155a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800155e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001562:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001572:	f043 030b 	orr.w	r3, r3, #11
 8001576:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	69fa      	ldr	r2, [r7, #28]
 8001582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001586:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800158a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001596:	4619      	mov	r1, r3
 8001598:	4610      	mov	r0, r2
 800159a:	f003 fb17 	bl	8004bcc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	695a      	ldr	r2, [r3, #20]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80015ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 fa46 	bl	8004a44 <USB_ReadInterrupts>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015c2:	d124      	bne.n	800160e <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f003 fadc 	bl	8004b86 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 fb39 	bl	8003c4a <USB_GetDevSpeed>
 80015d8:	4603      	mov	r3, r0
 80015da:	461a      	mov	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681c      	ldr	r4, [r3, #0]
 80015e4:	f001 fafa 	bl	8002bdc <HAL_RCC_GetHCLKFreq>
 80015e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	4620      	mov	r0, r4
 80015f4:	f002 f856 	bl	80036a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f005 faf0 	bl	8006bde <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	695a      	ldr	r2, [r3, #20]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800160c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f003 fa16 	bl	8004a44 <USB_ReadInterrupts>
 8001618:	4603      	mov	r3, r0
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b08      	cmp	r3, #8
 8001620:	d10a      	bne.n	8001638 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f005 facd 	bl	8006bc2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f002 0208 	and.w	r2, r2, #8
 8001636:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f003 fa01 	bl	8004a44 <USB_ReadInterrupts>
 8001642:	4603      	mov	r3, r0
 8001644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001648:	2b80      	cmp	r3, #128	; 0x80
 800164a:	d122      	bne.n	8001692 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001658:	2301      	movs	r3, #1
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
 800165c:	e014      	b.n	8001688 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001662:	4613      	mov	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	4413      	add	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	440b      	add	r3, r1
 800166c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d105      	bne.n	8001682 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	b2db      	uxtb	r3, r3
 800167a:	4619      	mov	r1, r3
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 fb0b 	bl	8001c98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	3301      	adds	r3, #1
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800168e:	429a      	cmp	r2, r3
 8001690:	d3e5      	bcc.n	800165e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f003 f9d4 	bl	8004a44 <USB_ReadInterrupts>
 800169c:	4603      	mov	r3, r0
 800169e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016a6:	d13b      	bne.n	8001720 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80016a8:	2301      	movs	r3, #1
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
 80016ac:	e02b      	b.n	8001706 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	015a      	lsls	r2, r3, #5
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	4413      	add	r3, r2
 80016b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c2:	4613      	mov	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	440b      	add	r3, r1
 80016cc:	3340      	adds	r3, #64	; 0x40
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d115      	bne.n	8001700 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80016d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	da12      	bge.n	8001700 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016de:	4613      	mov	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	440b      	add	r3, r1
 80016e8:	333f      	adds	r3, #63	; 0x3f
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	4619      	mov	r1, r3
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 facc 	bl	8001c98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	3301      	adds	r3, #1
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170c:	429a      	cmp	r2, r3
 800170e:	d3ce      	bcc.n	80016ae <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800171e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f003 f98d 	bl	8004a44 <USB_ReadInterrupts>
 800172a:	4603      	mov	r3, r0
 800172c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001730:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001734:	d155      	bne.n	80017e2 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001736:	2301      	movs	r3, #1
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
 800173a:	e045      	b.n	80017c8 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	015a      	lsls	r2, r3, #5
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	4413      	add	r3, r2
 8001744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001750:	4613      	mov	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	4413      	add	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d12e      	bne.n	80017c2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001764:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001766:	2b00      	cmp	r3, #0
 8001768:	da2b      	bge.n	80017c2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001776:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800177a:	429a      	cmp	r2, r3
 800177c:	d121      	bne.n	80017c2 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001782:	4613      	mov	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001790:	2201      	movs	r2, #1
 8001792:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10a      	bne.n	80017c2 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017be:	6053      	str	r3, [r2, #4]
            break;
 80017c0:	e007      	b.n	80017d2 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	3301      	adds	r3, #1
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d3b4      	bcc.n	800173c <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	695a      	ldr	r2, [r3, #20]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80017e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 f92c 	bl	8004a44 <USB_ReadInterrupts>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80017f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f6:	d10a      	bne.n	800180e <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f005 fa81 	bl	8006d00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	695a      	ldr	r2, [r3, #20]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800180c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f003 f916 	bl	8004a44 <USB_ReadInterrupts>
 8001818:	4603      	mov	r3, r0
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	2b04      	cmp	r3, #4
 8001820:	d115      	bne.n	800184e <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f005 fa71 	bl	8006d1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	430a      	orrs	r2, r1
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	e000      	b.n	800184e <HAL_PCD_IRQHandler+0x920>
      return;
 800184c:	bf00      	nop
    }
  }
}
 800184e:	3734      	adds	r7, #52	; 0x34
 8001850:	46bd      	mov	sp, r7
 8001852:	bd90      	pop	{r4, r7, pc}

08001854 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_PCD_SetAddress+0x1a>
 800186a:	2302      	movs	r3, #2
 800186c:	e013      	b.n	8001896 <HAL_PCD_SetAddress+0x42>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	78fa      	ldrb	r2, [r7, #3]
 800187a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	78fa      	ldrb	r2, [r7, #3]
 8001884:	4611      	mov	r1, r2
 8001886:	4618      	mov	r0, r3
 8001888:	f003 f874 	bl	8004974 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	4608      	mov	r0, r1
 80018a8:	4611      	mov	r1, r2
 80018aa:	461a      	mov	r2, r3
 80018ac:	4603      	mov	r3, r0
 80018ae:	70fb      	strb	r3, [r7, #3]
 80018b0:	460b      	mov	r3, r1
 80018b2:	803b      	strh	r3, [r7, #0]
 80018b4:	4613      	mov	r3, r2
 80018b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da0f      	bge.n	80018e4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	f003 020f 	and.w	r2, r3, #15
 80018ca:	4613      	mov	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	3338      	adds	r3, #56	; 0x38
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	4413      	add	r3, r2
 80018d8:	3304      	adds	r3, #4
 80018da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2201      	movs	r2, #1
 80018e0:	705a      	strb	r2, [r3, #1]
 80018e2:	e00f      	b.n	8001904 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	f003 020f 	and.w	r2, r3, #15
 80018ea:	4613      	mov	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4413      	add	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	3304      	adds	r3, #4
 80018fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	b2da      	uxtb	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001910:	883a      	ldrh	r2, [r7, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	78ba      	ldrb	r2, [r7, #2]
 800191a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	785b      	ldrb	r3, [r3, #1]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d004      	beq.n	800192e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800192e:	78bb      	ldrb	r3, [r7, #2]
 8001930:	2b02      	cmp	r3, #2
 8001932:	d102      	bne.n	800193a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_PCD_EP_Open+0xaa>
 8001944:	2302      	movs	r3, #2
 8001946:	e00e      	b.n	8001966 <HAL_PCD_EP_Open+0xc8>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68f9      	ldr	r1, [r7, #12]
 8001956:	4618      	mov	r0, r3
 8001958:	f002 f996 	bl	8003c88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001964:	7afb      	ldrb	r3, [r7, #11]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b084      	sub	sp, #16
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	460b      	mov	r3, r1
 8001978:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800197a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800197e:	2b00      	cmp	r3, #0
 8001980:	da0f      	bge.n	80019a2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	f003 020f 	and.w	r2, r3, #15
 8001988:	4613      	mov	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	3338      	adds	r3, #56	; 0x38
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	3304      	adds	r3, #4
 8001998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2201      	movs	r2, #1
 800199e:	705a      	strb	r2, [r3, #1]
 80019a0:	e00f      	b.n	80019c2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	f003 020f 	and.w	r2, r3, #15
 80019a8:	4613      	mov	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	4413      	add	r3, r2
 80019b8:	3304      	adds	r3, #4
 80019ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	f003 030f 	and.w	r3, r3, #15
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_PCD_EP_Close+0x6e>
 80019d8:	2302      	movs	r3, #2
 80019da:	e00e      	b.n	80019fa <HAL_PCD_EP_Close+0x8c>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68f9      	ldr	r1, [r7, #12]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f002 f9d4 	bl	8003d98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a12:	7afb      	ldrb	r3, [r7, #11]
 8001a14:	f003 020f 	and.w	r2, r3, #15
 8001a18:	4613      	mov	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	3304      	adds	r3, #4
 8001a2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	2200      	movs	r2, #0
 8001a42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a44:	7afb      	ldrb	r3, [r7, #11]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a50:	7afb      	ldrb	r3, [r7, #11]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d106      	bne.n	8001a68 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6979      	ldr	r1, [r7, #20]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f002 fc55 	bl	8004310 <USB_EP0StartXfer>
 8001a66:	e005      	b.n	8001a74 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6979      	ldr	r1, [r7, #20]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f002 fa6e 	bl	8003f50 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	460b      	mov	r3, r1
 8001a88:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	f003 020f 	and.w	r2, r3, #15
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001aa0:	681b      	ldr	r3, [r3, #0]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	460b      	mov	r3, r1
 8001abc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001abe:	7afb      	ldrb	r3, [r7, #11]
 8001ac0:	f003 020f 	and.w	r2, r3, #15
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4413      	add	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	3338      	adds	r3, #56	; 0x38
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2201      	movs	r2, #1
 8001aec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aee:	7afb      	ldrb	r3, [r7, #11]
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001afa:	7afb      	ldrb	r3, [r7, #11]
 8001afc:	f003 030f 	and.w	r3, r3, #15
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d106      	bne.n	8001b12 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6979      	ldr	r1, [r7, #20]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 fc00 	bl	8004310 <USB_EP0StartXfer>
 8001b10:	e005      	b.n	8001b1e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6979      	ldr	r1, [r7, #20]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f002 fa19 	bl	8003f50 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	f003 020f 	and.w	r2, r3, #15
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d901      	bls.n	8001b46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e04e      	b.n	8001be4 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	da0f      	bge.n	8001b6e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	f003 020f 	and.w	r2, r3, #15
 8001b54:	4613      	mov	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	4413      	add	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	3338      	adds	r3, #56	; 0x38
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	3304      	adds	r3, #4
 8001b64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	705a      	strb	r2, [r3, #1]
 8001b6c:	e00d      	b.n	8001b8a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b6e:	78fa      	ldrb	r2, [r7, #3]
 8001b70:	4613      	mov	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	4413      	add	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4413      	add	r3, r2
 8001b80:	3304      	adds	r3, #4
 8001b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_PCD_EP_SetStall+0x82>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e01c      	b.n	8001be4 <HAL_PCD_EP_SetStall+0xbc>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68f9      	ldr	r1, [r7, #12]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f002 fe07 	bl	80047cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bbe:	78fb      	ldrb	r3, [r7, #3]
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d108      	bne.n	8001bda <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	f002 fff9 	bl	8004bcc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	f003 020f 	and.w	r2, r3, #15
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d901      	bls.n	8001c0a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e042      	b.n	8001c90 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	da0f      	bge.n	8001c32 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	f003 020f 	and.w	r2, r3, #15
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	3338      	adds	r3, #56	; 0x38
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	3304      	adds	r3, #4
 8001c28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	705a      	strb	r2, [r3, #1]
 8001c30:	e00f      	b.n	8001c52 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	f003 020f 	and.w	r2, r3, #15
 8001c38:	4613      	mov	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	4413      	add	r3, r2
 8001c48:	3304      	adds	r3, #4
 8001c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <HAL_PCD_EP_ClrStall+0x86>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e00e      	b.n	8001c90 <HAL_PCD_EP_ClrStall+0xa4>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68f9      	ldr	r1, [r7, #12]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f002 fe11 	bl	80048a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	da0c      	bge.n	8001cc6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	f003 020f 	and.w	r2, r3, #15
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	3338      	adds	r3, #56	; 0x38
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	e00c      	b.n	8001ce0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	f003 020f 	and.w	r2, r3, #15
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	3304      	adds	r3, #4
 8001cde:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68f9      	ldr	r1, [r7, #12]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f002 fc34 	bl	8004554 <USB_EPStopXfer>
 8001cec:	4603      	mov	r3, r0
 8001cee:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001cf0:	7afb      	ldrb	r3, [r7, #11]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b088      	sub	sp, #32
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	4613      	mov	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	3338      	adds	r3, #56	; 0x38
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3304      	adds	r3, #4
 8001d20:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6a1a      	ldr	r2, [r3, #32]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d901      	bls.n	8001d32 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e067      	b.n	8001e02 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	69fa      	ldr	r2, [r7, #28]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d902      	bls.n	8001d4e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3303      	adds	r3, #3
 8001d52:	089b      	lsrs	r3, r3, #2
 8001d54:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d56:	e026      	b.n	8001da6 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	699a      	ldr	r2, [r3, #24]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d902      	bls.n	8001d74 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	3303      	adds	r3, #3
 8001d78:	089b      	lsrs	r3, r3, #2
 8001d7a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6919      	ldr	r1, [r3, #16]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	6978      	ldr	r0, [r7, #20]
 8001d8a:	f002 fc8d 	bl	80046a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	691a      	ldr	r2, [r3, #16]
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	441a      	add	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6a1a      	ldr	r2, [r3, #32]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	441a      	add	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d809      	bhi.n	8001dd0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6a1a      	ldr	r2, [r3, #32]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d203      	bcs.n	8001dd0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1c3      	bne.n	8001d58 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	699a      	ldr	r2, [r3, #24]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d811      	bhi.n	8001e00 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	2201      	movs	r2, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	6939      	ldr	r1, [r7, #16]
 8001df8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3720      	adds	r7, #32
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	333c      	adds	r3, #60	; 0x3c
 8001e24:	3304      	adds	r3, #4
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	015a      	lsls	r2, r3, #5
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4413      	add	r3, r2
 8001e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4a19      	ldr	r2, [pc, #100]	; (8001ea4 <PCD_EP_OutXfrComplete_int+0x98>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d124      	bne.n	8001e8c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00a      	beq.n	8001e62 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	015a      	lsls	r2, r3, #5
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e58:	461a      	mov	r2, r3
 8001e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e5e:	6093      	str	r3, [r2, #8]
 8001e60:	e01a      	b.n	8001e98 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d008      	beq.n	8001e7e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	015a      	lsls	r2, r3, #5
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2320      	movs	r3, #32
 8001e7c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	4619      	mov	r1, r3
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f004 fe67 	bl	8006b58 <HAL_PCD_DataOutStageCallback>
 8001e8a:	e005      	b.n	8001e98 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	4619      	mov	r1, r3
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f004 fe60 	bl	8006b58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	4f54310a 	.word	0x4f54310a

08001ea8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	333c      	adds	r3, #60	; 0x3c
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	015a      	lsls	r2, r3, #5
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4413      	add	r3, r2
 8001ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4a0c      	ldr	r2, [pc, #48]	; (8001f0c <PCD_EP_OutSetupPacket_int+0x64>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d90e      	bls.n	8001efc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d009      	beq.n	8001efc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	015a      	lsls	r2, r3, #5
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001efa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f004 fe19 	bl	8006b34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	4f54300a 	.word	0x4f54300a

08001f10 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	70fb      	strb	r3, [r7, #3]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d107      	bne.n	8001f3e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001f2e:	883b      	ldrh	r3, [r7, #0]
 8001f30:	0419      	lsls	r1, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
 8001f3c:	e028      	b.n	8001f90 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	0c1b      	lsrs	r3, r3, #16
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	4413      	add	r3, r2
 8001f4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	73fb      	strb	r3, [r7, #15]
 8001f50:	e00d      	b.n	8001f6e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	3340      	adds	r3, #64	; 0x40
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	0c1b      	lsrs	r3, r3, #16
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	4413      	add	r3, r2
 8001f66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	73fb      	strb	r3, [r7, #15]
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d3ec      	bcc.n	8001f52 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001f78:	883b      	ldrh	r3, [r7, #0]
 8001f7a:	0418      	lsls	r0, r3, #16
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6819      	ldr	r1, [r3, #0]
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	4302      	orrs	r2, r0
 8001f88:	3340      	adds	r3, #64	; 0x40
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	f043 0303 	orr.w	r3, r3, #3
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40007000 	.word	0x40007000

08002028 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <HAL_PWREx_GetVoltageRange+0x18>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40007000 	.word	0x40007000

08002044 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002052:	d130      	bne.n	80020b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002054:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800205c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002060:	d038      	beq.n	80020d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800206a:	4a1e      	ldr	r2, [pc, #120]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002070:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2232      	movs	r2, #50	; 0x32
 8002078:	fb02 f303 	mul.w	r3, r2, r3
 800207c:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	0c9b      	lsrs	r3, r3, #18
 8002084:	3301      	adds	r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002088:	e002      	b.n	8002090 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3b01      	subs	r3, #1
 800208e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209c:	d102      	bne.n	80020a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f2      	bne.n	800208a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020a4:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b0:	d110      	bne.n	80020d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e00f      	b.n	80020d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c2:	d007      	beq.n	80020d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020cc:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40007000 	.word	0x40007000
 80020e8:	20000000 	.word	0x20000000
 80020ec:	431bde83 	.word	0x431bde83

080020f0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_PWREx_EnableVddUSB+0x1c>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4a04      	ldr	r2, [pc, #16]	; (800210c <HAL_PWREx_EnableVddUSB+0x1c>)
 80020fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020fe:	6053      	str	r3, [r2, #4]
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40007000 	.word	0x40007000

08002110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e3c6      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002122:	4ba1      	ldr	r3, [pc, #644]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800212c:	4b9e      	ldr	r3, [pc, #632]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 80e4 	beq.w	800230c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d007      	beq.n	800215a <HAL_RCC_OscConfig+0x4a>
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b0c      	cmp	r3, #12
 800214e:	f040 808b 	bne.w	8002268 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b01      	cmp	r3, #1
 8002156:	f040 8087 	bne.w	8002268 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800215a:	4b93      	ldr	r3, [pc, #588]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <HAL_RCC_OscConfig+0x62>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e39e      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1a      	ldr	r2, [r3, #32]
 8002176:	4b8c      	ldr	r3, [pc, #560]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d004      	beq.n	800218c <HAL_RCC_OscConfig+0x7c>
 8002182:	4b89      	ldr	r3, [pc, #548]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800218a:	e005      	b.n	8002198 <HAL_RCC_OscConfig+0x88>
 800218c:	4b86      	ldr	r3, [pc, #536]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 800218e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002198:	4293      	cmp	r3, r2
 800219a:	d223      	bcs.n	80021e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 fd27 	bl	8002bf4 <RCC_SetFlashLatencyFromMSIRange>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e37f      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021b0:	4b7d      	ldr	r3, [pc, #500]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a7c      	ldr	r2, [pc, #496]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80021b6:	f043 0308 	orr.w	r3, r3, #8
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4b7a      	ldr	r3, [pc, #488]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	4977      	ldr	r1, [pc, #476]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ce:	4b76      	ldr	r3, [pc, #472]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	4972      	ldr	r1, [pc, #456]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
 80021e2:	e025      	b.n	8002230 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021e4:	4b70      	ldr	r3, [pc, #448]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a6f      	ldr	r2, [pc, #444]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80021ea:	f043 0308 	orr.w	r3, r3, #8
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	4b6d      	ldr	r3, [pc, #436]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	496a      	ldr	r1, [pc, #424]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002202:	4b69      	ldr	r3, [pc, #420]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	4965      	ldr	r1, [pc, #404]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d109      	bne.n	8002230 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fce7 	bl	8002bf4 <RCC_SetFlashLatencyFromMSIRange>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e33f      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002230:	f000 fc48 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	4b5c      	ldr	r3, [pc, #368]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	495a      	ldr	r1, [pc, #360]	; (80023ac <HAL_RCC_OscConfig+0x29c>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
 800224c:	4a58      	ldr	r2, [pc, #352]	; (80023b0 <HAL_RCC_OscConfig+0x2a0>)
 800224e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002250:	4b58      	ldr	r3, [pc, #352]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe f9a9 	bl	80005ac <HAL_InitTick>
 800225a:	4603      	mov	r3, r0
 800225c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d052      	beq.n	800230a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	e323      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d032      	beq.n	80022d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002270:	4b4d      	ldr	r3, [pc, #308]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a4c      	ldr	r2, [pc, #304]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800227c:	f7fe f9e6 	bl	800064c <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002284:	f7fe f9e2 	bl	800064c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e30c      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002296:	4b44      	ldr	r3, [pc, #272]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022a2:	4b41      	ldr	r3, [pc, #260]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a40      	ldr	r2, [pc, #256]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80022a8:	f043 0308 	orr.w	r3, r3, #8
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b3e      	ldr	r3, [pc, #248]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	493b      	ldr	r1, [pc, #236]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022c0:	4b39      	ldr	r3, [pc, #228]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	021b      	lsls	r3, r3, #8
 80022ce:	4936      	ldr	r1, [pc, #216]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
 80022d4:	e01a      	b.n	800230c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022d6:	4b34      	ldr	r3, [pc, #208]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a33      	ldr	r2, [pc, #204]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80022dc:	f023 0301 	bic.w	r3, r3, #1
 80022e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022e2:	f7fe f9b3 	bl	800064c <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022ea:	f7fe f9af 	bl	800064c <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e2d9      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022fc:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f0      	bne.n	80022ea <HAL_RCC_OscConfig+0x1da>
 8002308:	e000      	b.n	800230c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800230a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d074      	beq.n	8002402 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	2b08      	cmp	r3, #8
 800231c:	d005      	beq.n	800232a <HAL_RCC_OscConfig+0x21a>
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	2b0c      	cmp	r3, #12
 8002322:	d10e      	bne.n	8002342 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2b03      	cmp	r3, #3
 8002328:	d10b      	bne.n	8002342 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232a:	4b1f      	ldr	r3, [pc, #124]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d064      	beq.n	8002400 <HAL_RCC_OscConfig+0x2f0>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d160      	bne.n	8002400 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e2b6      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234a:	d106      	bne.n	800235a <HAL_RCC_OscConfig+0x24a>
 800234c:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a15      	ldr	r2, [pc, #84]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	e01d      	b.n	8002396 <HAL_RCC_OscConfig+0x286>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002362:	d10c      	bne.n	800237e <HAL_RCC_OscConfig+0x26e>
 8002364:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0f      	ldr	r2, [pc, #60]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 800236a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0c      	ldr	r2, [pc, #48]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	e00b      	b.n	8002396 <HAL_RCC_OscConfig+0x286>
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a09      	ldr	r2, [pc, #36]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a06      	ldr	r2, [pc, #24]	; (80023a8 <HAL_RCC_OscConfig+0x298>)
 8002390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002394:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d01c      	beq.n	80023d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239e:	f7fe f955 	bl	800064c <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a4:	e011      	b.n	80023ca <HAL_RCC_OscConfig+0x2ba>
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	08007350 	.word	0x08007350
 80023b0:	20000000 	.word	0x20000000
 80023b4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b8:	f7fe f948 	bl	800064c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e272      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ca:	4baf      	ldr	r3, [pc, #700]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x2a8>
 80023d6:	e014      	b.n	8002402 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7fe f938 	bl	800064c <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e0:	f7fe f934 	bl	800064c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	; 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e25e      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023f2:	4ba5      	ldr	r3, [pc, #660]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x2d0>
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d060      	beq.n	80024d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	2b04      	cmp	r3, #4
 8002412:	d005      	beq.n	8002420 <HAL_RCC_OscConfig+0x310>
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2b0c      	cmp	r3, #12
 8002418:	d119      	bne.n	800244e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d116      	bne.n	800244e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002420:	4b99      	ldr	r3, [pc, #612]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_OscConfig+0x328>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e23b      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002438:	4b93      	ldr	r3, [pc, #588]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	061b      	lsls	r3, r3, #24
 8002446:	4990      	ldr	r1, [pc, #576]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800244c:	e040      	b.n	80024d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d023      	beq.n	800249e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002456:	4b8c      	ldr	r3, [pc, #560]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a8b      	ldr	r2, [pc, #556]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 800245c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7fe f8f3 	bl	800064c <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246a:	f7fe f8ef 	bl	800064c <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e219      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800247c:	4b82      	ldr	r3, [pc, #520]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002488:	4b7f      	ldr	r3, [pc, #508]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	061b      	lsls	r3, r3, #24
 8002496:	497c      	ldr	r1, [pc, #496]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002498:	4313      	orrs	r3, r2
 800249a:	604b      	str	r3, [r1, #4]
 800249c:	e018      	b.n	80024d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249e:	4b7a      	ldr	r3, [pc, #488]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a79      	ldr	r2, [pc, #484]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80024a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024aa:	f7fe f8cf 	bl	800064c <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b2:	f7fe f8cb 	bl	800064c <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e1f5      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024c4:	4b70      	ldr	r3, [pc, #448]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f0      	bne.n	80024b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d03c      	beq.n	8002556 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01c      	beq.n	800251e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e4:	4b68      	ldr	r3, [pc, #416]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80024e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ea:	4a67      	ldr	r2, [pc, #412]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f4:	f7fe f8aa 	bl	800064c <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024fc:	f7fe f8a6 	bl	800064c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e1d0      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800250e:	4b5e      	ldr	r3, [pc, #376]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0ef      	beq.n	80024fc <HAL_RCC_OscConfig+0x3ec>
 800251c:	e01b      	b.n	8002556 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800251e:	4b5a      	ldr	r3, [pc, #360]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002524:	4a58      	ldr	r2, [pc, #352]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252e:	f7fe f88d 	bl	800064c <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002536:	f7fe f889 	bl	800064c <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e1b3      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002548:	4b4f      	ldr	r3, [pc, #316]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 800254a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1ef      	bne.n	8002536 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 80a6 	beq.w	80026b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002564:	2300      	movs	r3, #0
 8002566:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002568:	4b47      	ldr	r3, [pc, #284]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 800256a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10d      	bne.n	8002590 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002574:	4b44      	ldr	r3, [pc, #272]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002578:	4a43      	ldr	r2, [pc, #268]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 800257a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257e:	6593      	str	r3, [r2, #88]	; 0x58
 8002580:	4b41      	ldr	r3, [pc, #260]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258c:	2301      	movs	r3, #1
 800258e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002590:	4b3e      	ldr	r3, [pc, #248]	; (800268c <HAL_RCC_OscConfig+0x57c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002598:	2b00      	cmp	r3, #0
 800259a:	d118      	bne.n	80025ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800259c:	4b3b      	ldr	r3, [pc, #236]	; (800268c <HAL_RCC_OscConfig+0x57c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a3a      	ldr	r2, [pc, #232]	; (800268c <HAL_RCC_OscConfig+0x57c>)
 80025a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a8:	f7fe f850 	bl	800064c <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b0:	f7fe f84c 	bl	800064c <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e176      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c2:	4b32      	ldr	r3, [pc, #200]	; (800268c <HAL_RCC_OscConfig+0x57c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d108      	bne.n	80025e8 <HAL_RCC_OscConfig+0x4d8>
 80025d6:	4b2c      	ldr	r3, [pc, #176]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025dc:	4a2a      	ldr	r2, [pc, #168]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025e6:	e024      	b.n	8002632 <HAL_RCC_OscConfig+0x522>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b05      	cmp	r3, #5
 80025ee:	d110      	bne.n	8002612 <HAL_RCC_OscConfig+0x502>
 80025f0:	4b25      	ldr	r3, [pc, #148]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f6:	4a24      	ldr	r2, [pc, #144]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 80025f8:	f043 0304 	orr.w	r3, r3, #4
 80025fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002600:	4b21      	ldr	r3, [pc, #132]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002606:	4a20      	ldr	r2, [pc, #128]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002610:	e00f      	b.n	8002632 <HAL_RCC_OscConfig+0x522>
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002618:	4a1b      	ldr	r2, [pc, #108]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 800261a:	f023 0301 	bic.w	r3, r3, #1
 800261e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002622:	4b19      	ldr	r3, [pc, #100]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 8002624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002628:	4a17      	ldr	r2, [pc, #92]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 800262a:	f023 0304 	bic.w	r3, r3, #4
 800262e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d016      	beq.n	8002668 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263a:	f7fe f807 	bl	800064c <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002640:	e00a      	b.n	8002658 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002642:	f7fe f803 	bl	800064c <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002650:	4293      	cmp	r3, r2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e12b      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_RCC_OscConfig+0x578>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0ed      	beq.n	8002642 <HAL_RCC_OscConfig+0x532>
 8002666:	e01a      	b.n	800269e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7fd fff0 	bl	800064c <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800266e:	e00f      	b.n	8002690 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7fd ffec 	bl	800064c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d906      	bls.n	8002690 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e114      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
 800268c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002690:	4b89      	ldr	r3, [pc, #548]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1e8      	bne.n	8002670 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800269e:	7ffb      	ldrb	r3, [r7, #31]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d105      	bne.n	80026b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a4:	4b84      	ldr	r3, [pc, #528]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 80026a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a8:	4a83      	ldr	r2, [pc, #524]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 80026aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80fa 	beq.w	80028ae <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	2b02      	cmp	r3, #2
 80026c0:	f040 80d0 	bne.w	8002864 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026c4:	4b7c      	ldr	r3, [pc, #496]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f003 0203 	and.w	r2, r3, #3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d130      	bne.n	800273a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	3b01      	subs	r3, #1
 80026e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d127      	bne.n	800273a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d11f      	bne.n	800273a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002704:	2a07      	cmp	r2, #7
 8002706:	bf14      	ite	ne
 8002708:	2201      	movne	r2, #1
 800270a:	2200      	moveq	r2, #0
 800270c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800270e:	4293      	cmp	r3, r2
 8002710:	d113      	bne.n	800273a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271c:	085b      	lsrs	r3, r3, #1
 800271e:	3b01      	subs	r3, #1
 8002720:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d109      	bne.n	800273a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	3b01      	subs	r3, #1
 8002734:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002736:	429a      	cmp	r2, r3
 8002738:	d06e      	beq.n	8002818 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b0c      	cmp	r3, #12
 800273e:	d069      	beq.n	8002814 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002740:	4b5d      	ldr	r3, [pc, #372]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d105      	bne.n	8002758 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800274c:	4b5a      	ldr	r3, [pc, #360]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0a9      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800275c:	4b56      	ldr	r3, [pc, #344]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a55      	ldr	r2, [pc, #340]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 8002762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002766:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002768:	f7fd ff70 	bl	800064c <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002770:	f7fd ff6c 	bl	800064c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e096      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002782:	4b4d      	ldr	r3, [pc, #308]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800278e:	4b4a      	ldr	r3, [pc, #296]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	4b4a      	ldr	r3, [pc, #296]	; (80028bc <HAL_RCC_OscConfig+0x7ac>)
 8002794:	4013      	ands	r3, r2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800279e:	3a01      	subs	r2, #1
 80027a0:	0112      	lsls	r2, r2, #4
 80027a2:	4311      	orrs	r1, r2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027a8:	0212      	lsls	r2, r2, #8
 80027aa:	4311      	orrs	r1, r2
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027b0:	0852      	lsrs	r2, r2, #1
 80027b2:	3a01      	subs	r2, #1
 80027b4:	0552      	lsls	r2, r2, #21
 80027b6:	4311      	orrs	r1, r2
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027bc:	0852      	lsrs	r2, r2, #1
 80027be:	3a01      	subs	r2, #1
 80027c0:	0652      	lsls	r2, r2, #25
 80027c2:	4311      	orrs	r1, r2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027c8:	0912      	lsrs	r2, r2, #4
 80027ca:	0452      	lsls	r2, r2, #17
 80027cc:	430a      	orrs	r2, r1
 80027ce:	493a      	ldr	r1, [pc, #232]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027d4:	4b38      	ldr	r3, [pc, #224]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a37      	ldr	r2, [pc, #220]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 80027da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027e0:	4b35      	ldr	r3, [pc, #212]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4a34      	ldr	r2, [pc, #208]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 80027e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027ec:	f7fd ff2e 	bl	800064c <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fd ff2a 	bl	800064c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e054      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002806:	4b2c      	ldr	r3, [pc, #176]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002812:	e04c      	b.n	80028ae <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e04b      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002818:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d144      	bne.n	80028ae <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002824:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a23      	ldr	r2, [pc, #140]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 800282a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800282e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002830:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a20      	ldr	r2, [pc, #128]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 8002836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800283a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800283c:	f7fd ff06 	bl	800064c <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002844:	f7fd ff02 	bl	800064c <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e02c      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002856:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0x734>
 8002862:	e024      	b.n	80028ae <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	2b0c      	cmp	r3, #12
 8002868:	d01f      	beq.n	80028aa <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286a:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 8002870:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fd fee9 	bl	800064c <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287e:	f7fd fee5 	bl	800064c <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e00f      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002890:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	4905      	ldr	r1, [pc, #20]	; (80028b8 <HAL_RCC_OscConfig+0x7a8>)
 80028a2:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <HAL_RCC_OscConfig+0x7b0>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	60cb      	str	r3, [r1, #12]
 80028a8:	e001      	b.n	80028ae <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3720      	adds	r7, #32
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000
 80028bc:	f99d808c 	.word	0xf99d808c
 80028c0:	feeefffc 	.word	0xfeeefffc

080028c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0e7      	b.n	8002aa8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d8:	4b75      	ldr	r3, [pc, #468]	; (8002ab0 <HAL_RCC_ClockConfig+0x1ec>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d910      	bls.n	8002908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b72      	ldr	r3, [pc, #456]	; (8002ab0 <HAL_RCC_ClockConfig+0x1ec>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 0207 	bic.w	r2, r3, #7
 80028ee:	4970      	ldr	r1, [pc, #448]	; (8002ab0 <HAL_RCC_ClockConfig+0x1ec>)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b6e      	ldr	r3, [pc, #440]	; (8002ab0 <HAL_RCC_ClockConfig+0x1ec>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0cf      	b.n	8002aa8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d010      	beq.n	8002936 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	4b66      	ldr	r3, [pc, #408]	; (8002ab4 <HAL_RCC_ClockConfig+0x1f0>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002920:	429a      	cmp	r2, r3
 8002922:	d908      	bls.n	8002936 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002924:	4b63      	ldr	r3, [pc, #396]	; (8002ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4960      	ldr	r1, [pc, #384]	; (8002ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d04c      	beq.n	80029dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b03      	cmp	r3, #3
 8002948:	d107      	bne.n	800295a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800294a:	4b5a      	ldr	r3, [pc, #360]	; (8002ab4 <HAL_RCC_ClockConfig+0x1f0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d121      	bne.n	800299a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e0a6      	b.n	8002aa8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002962:	4b54      	ldr	r3, [pc, #336]	; (8002ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d115      	bne.n	800299a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e09a      	b.n	8002aa8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800297a:	4b4e      	ldr	r3, [pc, #312]	; (8002ab4 <HAL_RCC_ClockConfig+0x1f0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e08e      	b.n	8002aa8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800298a:	4b4a      	ldr	r3, [pc, #296]	; (8002ab4 <HAL_RCC_ClockConfig+0x1f0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e086      	b.n	8002aa8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800299a:	4b46      	ldr	r3, [pc, #280]	; (8002ab4 <HAL_RCC_ClockConfig+0x1f0>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f023 0203 	bic.w	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4943      	ldr	r1, [pc, #268]	; (8002ab4 <HAL_RCC_ClockConfig+0x1f0>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ac:	f7fd fe4e 	bl	800064c <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b4:	f7fd fe4a 	bl	800064c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e06e      	b.n	8002aa8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	4b3a      	ldr	r3, [pc, #232]	; (8002ab4 <HAL_RCC_ClockConfig+0x1f0>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 020c 	and.w	r2, r3, #12
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1eb      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d010      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	4b31      	ldr	r3, [pc, #196]	; (8002ab4 <HAL_RCC_ClockConfig+0x1f0>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d208      	bcs.n	8002a0a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f8:	4b2e      	ldr	r3, [pc, #184]	; (8002ab4 <HAL_RCC_ClockConfig+0x1f0>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	492b      	ldr	r1, [pc, #172]	; (8002ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a0a:	4b29      	ldr	r3, [pc, #164]	; (8002ab0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d210      	bcs.n	8002a3a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a18:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f023 0207 	bic.w	r2, r3, #7
 8002a20:	4923      	ldr	r1, [pc, #140]	; (8002ab0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a28:	4b21      	ldr	r3, [pc, #132]	; (8002ab0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d001      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e036      	b.n	8002aa8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a46:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	4918      	ldr	r1, [pc, #96]	; (8002ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d009      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a64:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4910      	ldr	r1, [pc, #64]	; (8002ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a78:	f000 f824 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	f003 030f 	and.w	r3, r3, #15
 8002a88:	490b      	ldr	r1, [pc, #44]	; (8002ab8 <HAL_RCC_ClockConfig+0x1f4>)
 8002a8a:	5ccb      	ldrb	r3, [r1, r3]
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
 8002a94:	4a09      	ldr	r2, [pc, #36]	; (8002abc <HAL_RCC_ClockConfig+0x1f8>)
 8002a96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_RCC_ClockConfig+0x1fc>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fd fd85 	bl	80005ac <HAL_InitTick>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002aa6:	7afb      	ldrb	r3, [r7, #11]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40022000 	.word	0x40022000
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	08007350 	.word	0x08007350
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	20000004 	.word	0x20000004

08002ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b089      	sub	sp, #36	; 0x24
 8002ac8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ad2:	4b3e      	ldr	r3, [pc, #248]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002adc:	4b3b      	ldr	r3, [pc, #236]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x34>
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	2b0c      	cmp	r3, #12
 8002af0:	d121      	bne.n	8002b36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d11e      	bne.n	8002b36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002af8:	4b34      	ldr	r3, [pc, #208]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d107      	bne.n	8002b14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b04:	4b31      	ldr	r3, [pc, #196]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	e005      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b14:	4b2d      	ldr	r3, [pc, #180]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b20:	4a2b      	ldr	r2, [pc, #172]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10d      	bne.n	8002b4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b34:	e00a      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d102      	bne.n	8002b42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b3c:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	e004      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b48:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	2b0c      	cmp	r3, #12
 8002b50:	d134      	bne.n	8002bbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b52:	4b1e      	ldr	r3, [pc, #120]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d003      	beq.n	8002b6a <HAL_RCC_GetSysClockFreq+0xa6>
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d003      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0xac>
 8002b68:	e005      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b6c:	617b      	str	r3, [r7, #20]
      break;
 8002b6e:	e005      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b70:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b72:	617b      	str	r3, [r7, #20]
      break;
 8002b74:	e002      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	617b      	str	r3, [r7, #20]
      break;
 8002b7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b7c:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	3301      	adds	r3, #1
 8002b88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	fb02 f203 	mul.w	r2, r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	0e5b      	lsrs	r3, r3, #25
 8002ba8:	f003 0303 	and.w	r3, r3, #3
 8002bac:	3301      	adds	r3, #1
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bbc:	69bb      	ldr	r3, [r7, #24]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3724      	adds	r7, #36	; 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	08007360 	.word	0x08007360
 8002bd4:	00f42400 	.word	0x00f42400
 8002bd8:	007a1200 	.word	0x007a1200

08002bdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be0:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000000 	.word	0x20000000

08002bf4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c00:	4b2a      	ldr	r3, [pc, #168]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c0c:	f7ff fa0c 	bl	8002028 <HAL_PWREx_GetVoltageRange>
 8002c10:	6178      	str	r0, [r7, #20]
 8002c12:	e014      	b.n	8002c3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c14:	4b25      	ldr	r3, [pc, #148]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	4a24      	ldr	r2, [pc, #144]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c20:	4b22      	ldr	r3, [pc, #136]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c2c:	f7ff f9fc 	bl	8002028 <HAL_PWREx_GetVoltageRange>
 8002c30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c32:	4b1e      	ldr	r3, [pc, #120]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c36:	4a1d      	ldr	r2, [pc, #116]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c44:	d10b      	bne.n	8002c5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b80      	cmp	r3, #128	; 0x80
 8002c4a:	d919      	bls.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2ba0      	cmp	r3, #160	; 0xa0
 8002c50:	d902      	bls.n	8002c58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c52:	2302      	movs	r3, #2
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	e013      	b.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c58:	2301      	movs	r3, #1
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	e010      	b.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b80      	cmp	r3, #128	; 0x80
 8002c62:	d902      	bls.n	8002c6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c64:	2303      	movs	r3, #3
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	e00a      	b.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b80      	cmp	r3, #128	; 0x80
 8002c6e:	d102      	bne.n	8002c76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c70:	2302      	movs	r3, #2
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	e004      	b.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b70      	cmp	r3, #112	; 0x70
 8002c7a:	d101      	bne.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f023 0207 	bic.w	r2, r3, #7
 8002c88:	4909      	ldr	r1, [pc, #36]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c90:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d001      	beq.n	8002ca2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40022000 	.word	0x40022000

08002cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d041      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cd4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cd8:	d02a      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002cda:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cde:	d824      	bhi.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ce0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ce4:	d008      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ce6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cea:	d81e      	bhi.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf4:	d010      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002cf6:	e018      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cf8:	4b86      	ldr	r3, [pc, #536]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a85      	ldr	r2, [pc, #532]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d02:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d04:	e015      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 facb 	bl	80032a8 <RCCEx_PLLSAI1_Config>
 8002d12:	4603      	mov	r3, r0
 8002d14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d16:	e00c      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3320      	adds	r3, #32
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fbb6 	bl	8003490 <RCCEx_PLLSAI2_Config>
 8002d24:	4603      	mov	r3, r0
 8002d26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d28:	e003      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	74fb      	strb	r3, [r7, #19]
      break;
 8002d2e:	e000      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10b      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d38:	4b76      	ldr	r3, [pc, #472]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d46:	4973      	ldr	r1, [pc, #460]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d4e:	e001      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d041      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d68:	d02a      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d6e:	d824      	bhi.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d74:	d008      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d7a:	d81e      	bhi.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d84:	d010      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d86:	e018      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d88:	4b62      	ldr	r3, [pc, #392]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a61      	ldr	r2, [pc, #388]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d92:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d94:	e015      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fa83 	bl	80032a8 <RCCEx_PLLSAI1_Config>
 8002da2:	4603      	mov	r3, r0
 8002da4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002da6:	e00c      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3320      	adds	r3, #32
 8002dac:	2100      	movs	r1, #0
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fb6e 	bl	8003490 <RCCEx_PLLSAI2_Config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002db8:	e003      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	74fb      	strb	r3, [r7, #19]
      break;
 8002dbe:	e000      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002dc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dc2:	7cfb      	ldrb	r3, [r7, #19]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10b      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dc8:	4b52      	ldr	r3, [pc, #328]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dd6:	494f      	ldr	r1, [pc, #316]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002dde:	e001      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 80a0 	beq.w	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df2:	2300      	movs	r3, #0
 8002df4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002df6:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e06:	2300      	movs	r3, #0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00d      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0c:	4b41      	ldr	r3, [pc, #260]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e10:	4a40      	ldr	r2, [pc, #256]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e16:	6593      	str	r3, [r2, #88]	; 0x58
 8002e18:	4b3e      	ldr	r3, [pc, #248]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e24:	2301      	movs	r3, #1
 8002e26:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e28:	4b3b      	ldr	r3, [pc, #236]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a3a      	ldr	r2, [pc, #232]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e34:	f7fd fc0a 	bl	800064c <HAL_GetTick>
 8002e38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e3a:	e009      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3c:	f7fd fc06 	bl	800064c <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d902      	bls.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	74fb      	strb	r3, [r7, #19]
        break;
 8002e4e:	e005      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e50:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ef      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e5c:	7cfb      	ldrb	r3, [r7, #19]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d15c      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e62:	4b2c      	ldr	r3, [pc, #176]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01f      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d019      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e80:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e8c:	4b21      	ldr	r3, [pc, #132]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e92:	4a20      	ldr	r2, [pc, #128]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e9c:	4b1d      	ldr	r3, [pc, #116]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea2:	4a1c      	ldr	r2, [pc, #112]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002eac:	4a19      	ldr	r2, [pc, #100]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d016      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebe:	f7fd fbc5 	bl	800064c <HAL_GetTick>
 8002ec2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec4:	e00b      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec6:	f7fd fbc1 	bl	800064c <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d902      	bls.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	74fb      	strb	r3, [r7, #19]
            break;
 8002edc:	e006      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ede:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0ec      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002eec:	7cfb      	ldrb	r3, [r7, #19]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ef2:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f02:	4904      	ldr	r1, [pc, #16]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f0a:	e009      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f0c:	7cfb      	ldrb	r3, [r7, #19]
 8002f0e:	74bb      	strb	r3, [r7, #18]
 8002f10:	e006      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1c:	7cfb      	ldrb	r3, [r7, #19]
 8002f1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f20:	7c7b      	ldrb	r3, [r7, #17]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d105      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f26:	4b9e      	ldr	r3, [pc, #632]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2a:	4a9d      	ldr	r2, [pc, #628]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f3e:	4b98      	ldr	r3, [pc, #608]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f44:	f023 0203 	bic.w	r2, r3, #3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4c:	4994      	ldr	r1, [pc, #592]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f60:	4b8f      	ldr	r3, [pc, #572]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f66:	f023 020c 	bic.w	r2, r3, #12
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	498c      	ldr	r1, [pc, #560]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f82:	4b87      	ldr	r3, [pc, #540]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	4983      	ldr	r1, [pc, #524]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fa4:	4b7e      	ldr	r3, [pc, #504]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002faa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	497b      	ldr	r1, [pc, #492]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fc6:	4b76      	ldr	r3, [pc, #472]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd4:	4972      	ldr	r1, [pc, #456]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00a      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fe8:	4b6d      	ldr	r3, [pc, #436]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff6:	496a      	ldr	r1, [pc, #424]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00a      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800300a:	4b65      	ldr	r3, [pc, #404]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003010:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003018:	4961      	ldr	r1, [pc, #388]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00a      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800302c:	4b5c      	ldr	r3, [pc, #368]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003032:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303a:	4959      	ldr	r1, [pc, #356]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800304e:	4b54      	ldr	r3, [pc, #336]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003054:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305c:	4950      	ldr	r1, [pc, #320]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00a      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003070:	4b4b      	ldr	r3, [pc, #300]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003076:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307e:	4948      	ldr	r1, [pc, #288]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003092:	4b43      	ldr	r3, [pc, #268]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003098:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a0:	493f      	ldr	r1, [pc, #252]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d028      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030b4:	4b3a      	ldr	r3, [pc, #232]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c2:	4937      	ldr	r1, [pc, #220]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030d2:	d106      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d4:	4b32      	ldr	r3, [pc, #200]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4a31      	ldr	r2, [pc, #196]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030de:	60d3      	str	r3, [r2, #12]
 80030e0:	e011      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030ea:	d10c      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3304      	adds	r3, #4
 80030f0:	2101      	movs	r1, #1
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 f8d8 	bl	80032a8 <RCCEx_PLLSAI1_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030fc:	7cfb      	ldrb	r3, [r7, #19]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003102:	7cfb      	ldrb	r3, [r7, #19]
 8003104:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d028      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003112:	4b23      	ldr	r3, [pc, #140]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003118:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003120:	491f      	ldr	r1, [pc, #124]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003130:	d106      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003132:	4b1b      	ldr	r3, [pc, #108]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	4a1a      	ldr	r2, [pc, #104]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800313c:	60d3      	str	r3, [r2, #12]
 800313e:	e011      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003148:	d10c      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3304      	adds	r3, #4
 800314e:	2101      	movs	r1, #1
 8003150:	4618      	mov	r0, r3
 8003152:	f000 f8a9 	bl	80032a8 <RCCEx_PLLSAI1_Config>
 8003156:	4603      	mov	r3, r0
 8003158:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800315a:	7cfb      	ldrb	r3, [r7, #19]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003160:	7cfb      	ldrb	r3, [r7, #19]
 8003162:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d02b      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003176:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317e:	4908      	ldr	r1, [pc, #32]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800318e:	d109      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003190:	4b03      	ldr	r3, [pc, #12]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4a02      	ldr	r2, [pc, #8]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800319a:	60d3      	str	r3, [r2, #12]
 800319c:	e014      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3304      	adds	r3, #4
 80031b2:	2101      	movs	r1, #1
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 f877 	bl	80032a8 <RCCEx_PLLSAI1_Config>
 80031ba:	4603      	mov	r3, r0
 80031bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031be:	7cfb      	ldrb	r3, [r7, #19]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80031c4:	7cfb      	ldrb	r3, [r7, #19]
 80031c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d02f      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031d4:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031e2:	4928      	ldr	r1, [pc, #160]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031f2:	d10d      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3304      	adds	r3, #4
 80031f8:	2102      	movs	r1, #2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 f854 	bl	80032a8 <RCCEx_PLLSAI1_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003204:	7cfb      	ldrb	r3, [r7, #19]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d014      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800320a:	7cfb      	ldrb	r3, [r7, #19]
 800320c:	74bb      	strb	r3, [r7, #18]
 800320e:	e011      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003218:	d10c      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3320      	adds	r3, #32
 800321e:	2102      	movs	r1, #2
 8003220:	4618      	mov	r0, r3
 8003222:	f000 f935 	bl	8003490 <RCCEx_PLLSAI2_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800322a:	7cfb      	ldrb	r3, [r7, #19]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003230:	7cfb      	ldrb	r3, [r7, #19]
 8003232:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003240:	4b10      	ldr	r3, [pc, #64]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800324e:	490d      	ldr	r1, [pc, #52]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003268:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003272:	4904      	ldr	r1, [pc, #16]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800327a:	7cbb      	ldrb	r3, [r7, #18]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40021000 	.word	0x40021000

08003288 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003292:	f043 0304 	orr.w	r3, r3, #4
 8003296:	6013      	str	r3, [r2, #0]
}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000

080032a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032b6:	4b75      	ldr	r3, [pc, #468]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d018      	beq.n	80032f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032c2:	4b72      	ldr	r3, [pc, #456]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f003 0203 	and.w	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d10d      	bne.n	80032ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
       ||
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d009      	beq.n	80032ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032da:	4b6c      	ldr	r3, [pc, #432]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	091b      	lsrs	r3, r3, #4
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
       ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d047      	beq.n	800337e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	73fb      	strb	r3, [r7, #15]
 80032f2:	e044      	b.n	800337e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d018      	beq.n	800332e <RCCEx_PLLSAI1_Config+0x86>
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d825      	bhi.n	800334c <RCCEx_PLLSAI1_Config+0xa4>
 8003300:	2b01      	cmp	r3, #1
 8003302:	d002      	beq.n	800330a <RCCEx_PLLSAI1_Config+0x62>
 8003304:	2b02      	cmp	r3, #2
 8003306:	d009      	beq.n	800331c <RCCEx_PLLSAI1_Config+0x74>
 8003308:	e020      	b.n	800334c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800330a:	4b60      	ldr	r3, [pc, #384]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d11d      	bne.n	8003352 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800331a:	e01a      	b.n	8003352 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800331c:	4b5b      	ldr	r3, [pc, #364]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003324:	2b00      	cmp	r3, #0
 8003326:	d116      	bne.n	8003356 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800332c:	e013      	b.n	8003356 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800332e:	4b57      	ldr	r3, [pc, #348]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10f      	bne.n	800335a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800333a:	4b54      	ldr	r3, [pc, #336]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d109      	bne.n	800335a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800334a:	e006      	b.n	800335a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
      break;
 8003350:	e004      	b.n	800335c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003352:	bf00      	nop
 8003354:	e002      	b.n	800335c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003356:	bf00      	nop
 8003358:	e000      	b.n	800335c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800335a:	bf00      	nop
    }

    if(status == HAL_OK)
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10d      	bne.n	800337e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003362:	4b4a      	ldr	r3, [pc, #296]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6819      	ldr	r1, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	3b01      	subs	r3, #1
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	430b      	orrs	r3, r1
 8003378:	4944      	ldr	r1, [pc, #272]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 800337a:	4313      	orrs	r3, r2
 800337c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d17d      	bne.n	8003480 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003384:	4b41      	ldr	r3, [pc, #260]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a40      	ldr	r2, [pc, #256]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 800338a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800338e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003390:	f7fd f95c 	bl	800064c <HAL_GetTick>
 8003394:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003396:	e009      	b.n	80033ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003398:	f7fd f958 	bl	800064c <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d902      	bls.n	80033ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	73fb      	strb	r3, [r7, #15]
        break;
 80033aa:	e005      	b.n	80033b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033ac:	4b37      	ldr	r3, [pc, #220]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1ef      	bne.n	8003398 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d160      	bne.n	8003480 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d111      	bne.n	80033e8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033c4:	4b31      	ldr	r3, [pc, #196]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6892      	ldr	r2, [r2, #8]
 80033d4:	0211      	lsls	r1, r2, #8
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	68d2      	ldr	r2, [r2, #12]
 80033da:	0912      	lsrs	r2, r2, #4
 80033dc:	0452      	lsls	r2, r2, #17
 80033de:	430a      	orrs	r2, r1
 80033e0:	492a      	ldr	r1, [pc, #168]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	610b      	str	r3, [r1, #16]
 80033e6:	e027      	b.n	8003438 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d112      	bne.n	8003414 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033ee:	4b27      	ldr	r3, [pc, #156]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80033f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6892      	ldr	r2, [r2, #8]
 80033fe:	0211      	lsls	r1, r2, #8
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6912      	ldr	r2, [r2, #16]
 8003404:	0852      	lsrs	r2, r2, #1
 8003406:	3a01      	subs	r2, #1
 8003408:	0552      	lsls	r2, r2, #21
 800340a:	430a      	orrs	r2, r1
 800340c:	491f      	ldr	r1, [pc, #124]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 800340e:	4313      	orrs	r3, r2
 8003410:	610b      	str	r3, [r1, #16]
 8003412:	e011      	b.n	8003438 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003414:	4b1d      	ldr	r3, [pc, #116]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800341c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6892      	ldr	r2, [r2, #8]
 8003424:	0211      	lsls	r1, r2, #8
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6952      	ldr	r2, [r2, #20]
 800342a:	0852      	lsrs	r2, r2, #1
 800342c:	3a01      	subs	r2, #1
 800342e:	0652      	lsls	r2, r2, #25
 8003430:	430a      	orrs	r2, r1
 8003432:	4916      	ldr	r1, [pc, #88]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003434:	4313      	orrs	r3, r2
 8003436:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003438:	4b14      	ldr	r3, [pc, #80]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a13      	ldr	r2, [pc, #76]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 800343e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003442:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003444:	f7fd f902 	bl	800064c <HAL_GetTick>
 8003448:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800344a:	e009      	b.n	8003460 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800344c:	f7fd f8fe 	bl	800064c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d902      	bls.n	8003460 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	73fb      	strb	r3, [r7, #15]
          break;
 800345e:	e005      	b.n	800346c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003460:	4b0a      	ldr	r3, [pc, #40]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0ef      	beq.n	800344c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	4904      	ldr	r1, [pc, #16]	; (800348c <RCCEx_PLLSAI1_Config+0x1e4>)
 800347c:	4313      	orrs	r3, r2
 800347e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003480:	7bfb      	ldrb	r3, [r7, #15]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000

08003490 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800349e:	4b6a      	ldr	r3, [pc, #424]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d018      	beq.n	80034dc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034aa:	4b67      	ldr	r3, [pc, #412]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f003 0203 	and.w	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d10d      	bne.n	80034d6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
       ||
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d009      	beq.n	80034d6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034c2:	4b61      	ldr	r3, [pc, #388]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	091b      	lsrs	r3, r3, #4
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
       ||
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d047      	beq.n	8003566 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
 80034da:	e044      	b.n	8003566 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d018      	beq.n	8003516 <RCCEx_PLLSAI2_Config+0x86>
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d825      	bhi.n	8003534 <RCCEx_PLLSAI2_Config+0xa4>
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d002      	beq.n	80034f2 <RCCEx_PLLSAI2_Config+0x62>
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d009      	beq.n	8003504 <RCCEx_PLLSAI2_Config+0x74>
 80034f0:	e020      	b.n	8003534 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034f2:	4b55      	ldr	r3, [pc, #340]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d11d      	bne.n	800353a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003502:	e01a      	b.n	800353a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003504:	4b50      	ldr	r3, [pc, #320]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800350c:	2b00      	cmp	r3, #0
 800350e:	d116      	bne.n	800353e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003514:	e013      	b.n	800353e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003516:	4b4c      	ldr	r3, [pc, #304]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10f      	bne.n	8003542 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003522:	4b49      	ldr	r3, [pc, #292]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003532:	e006      	b.n	8003542 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
      break;
 8003538:	e004      	b.n	8003544 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800353a:	bf00      	nop
 800353c:	e002      	b.n	8003544 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800353e:	bf00      	nop
 8003540:	e000      	b.n	8003544 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003542:	bf00      	nop
    }

    if(status == HAL_OK)
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10d      	bne.n	8003566 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800354a:	4b3f      	ldr	r3, [pc, #252]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6819      	ldr	r1, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	3b01      	subs	r3, #1
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	430b      	orrs	r3, r1
 8003560:	4939      	ldr	r1, [pc, #228]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003562:	4313      	orrs	r3, r2
 8003564:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003566:	7bfb      	ldrb	r3, [r7, #15]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d167      	bne.n	800363c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800356c:	4b36      	ldr	r3, [pc, #216]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a35      	ldr	r2, [pc, #212]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003576:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003578:	f7fd f868 	bl	800064c <HAL_GetTick>
 800357c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800357e:	e009      	b.n	8003594 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003580:	f7fd f864 	bl	800064c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d902      	bls.n	8003594 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	73fb      	strb	r3, [r7, #15]
        break;
 8003592:	e005      	b.n	80035a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003594:	4b2c      	ldr	r3, [pc, #176]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1ef      	bne.n	8003580 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d14a      	bne.n	800363c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d111      	bne.n	80035d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035ac:	4b26      	ldr	r3, [pc, #152]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6892      	ldr	r2, [r2, #8]
 80035bc:	0211      	lsls	r1, r2, #8
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68d2      	ldr	r2, [r2, #12]
 80035c2:	0912      	lsrs	r2, r2, #4
 80035c4:	0452      	lsls	r2, r2, #17
 80035c6:	430a      	orrs	r2, r1
 80035c8:	491f      	ldr	r1, [pc, #124]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	614b      	str	r3, [r1, #20]
 80035ce:	e011      	b.n	80035f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035d0:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6892      	ldr	r2, [r2, #8]
 80035e0:	0211      	lsls	r1, r2, #8
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6912      	ldr	r2, [r2, #16]
 80035e6:	0852      	lsrs	r2, r2, #1
 80035e8:	3a01      	subs	r2, #1
 80035ea:	0652      	lsls	r2, r2, #25
 80035ec:	430a      	orrs	r2, r1
 80035ee:	4916      	ldr	r1, [pc, #88]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035f4:	4b14      	ldr	r3, [pc, #80]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a13      	ldr	r2, [pc, #76]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003600:	f7fd f824 	bl	800064c <HAL_GetTick>
 8003604:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003606:	e009      	b.n	800361c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003608:	f7fd f820 	bl	800064c <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d902      	bls.n	800361c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	73fb      	strb	r3, [r7, #15]
          break;
 800361a:	e005      	b.n	8003628 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800361c:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0ef      	beq.n	8003608 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	4904      	ldr	r1, [pc, #16]	; (8003648 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003638:	4313      	orrs	r3, r2
 800363a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800363c:	7bfb      	ldrb	r3, [r7, #15]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000

0800364c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800364c:	b084      	sub	sp, #16
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	f107 001c 	add.w	r0, r7, #28
 800365a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f001 faf6 	bl	8004c5c <USB_CoreReset>
 8003670:	4603      	mov	r3, r0
 8003672:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	639a      	str	r2, [r3, #56]	; 0x38
 8003686:	e005      	b.n	8003694 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003694:	7bfb      	ldrb	r3, [r7, #15]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036a0:	b004      	add	sp, #16
 80036a2:	4770      	bx	lr

080036a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	4613      	mov	r3, r2
 80036b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d165      	bne.n	8003784 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4a3e      	ldr	r2, [pc, #248]	; (80037b4 <USB_SetTurnaroundTime+0x110>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d906      	bls.n	80036ce <USB_SetTurnaroundTime+0x2a>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4a3d      	ldr	r2, [pc, #244]	; (80037b8 <USB_SetTurnaroundTime+0x114>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d202      	bcs.n	80036ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80036c8:	230f      	movs	r3, #15
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	e05c      	b.n	8003788 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	4a39      	ldr	r2, [pc, #228]	; (80037b8 <USB_SetTurnaroundTime+0x114>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d306      	bcc.n	80036e4 <USB_SetTurnaroundTime+0x40>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4a38      	ldr	r2, [pc, #224]	; (80037bc <USB_SetTurnaroundTime+0x118>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d202      	bcs.n	80036e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80036de:	230e      	movs	r3, #14
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	e051      	b.n	8003788 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4a35      	ldr	r2, [pc, #212]	; (80037bc <USB_SetTurnaroundTime+0x118>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d306      	bcc.n	80036fa <USB_SetTurnaroundTime+0x56>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4a34      	ldr	r2, [pc, #208]	; (80037c0 <USB_SetTurnaroundTime+0x11c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d202      	bcs.n	80036fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80036f4:	230d      	movs	r3, #13
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	e046      	b.n	8003788 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4a30      	ldr	r2, [pc, #192]	; (80037c0 <USB_SetTurnaroundTime+0x11c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d306      	bcc.n	8003710 <USB_SetTurnaroundTime+0x6c>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4a2f      	ldr	r2, [pc, #188]	; (80037c4 <USB_SetTurnaroundTime+0x120>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d802      	bhi.n	8003710 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800370a:	230c      	movs	r3, #12
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	e03b      	b.n	8003788 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4a2c      	ldr	r2, [pc, #176]	; (80037c4 <USB_SetTurnaroundTime+0x120>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d906      	bls.n	8003726 <USB_SetTurnaroundTime+0x82>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4a2b      	ldr	r2, [pc, #172]	; (80037c8 <USB_SetTurnaroundTime+0x124>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d802      	bhi.n	8003726 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003720:	230b      	movs	r3, #11
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	e030      	b.n	8003788 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	4a27      	ldr	r2, [pc, #156]	; (80037c8 <USB_SetTurnaroundTime+0x124>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d906      	bls.n	800373c <USB_SetTurnaroundTime+0x98>
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4a26      	ldr	r2, [pc, #152]	; (80037cc <USB_SetTurnaroundTime+0x128>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d802      	bhi.n	800373c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003736:	230a      	movs	r3, #10
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	e025      	b.n	8003788 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4a23      	ldr	r2, [pc, #140]	; (80037cc <USB_SetTurnaroundTime+0x128>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d906      	bls.n	8003752 <USB_SetTurnaroundTime+0xae>
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <USB_SetTurnaroundTime+0x12c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d202      	bcs.n	8003752 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800374c:	2309      	movs	r3, #9
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	e01a      	b.n	8003788 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	4a1e      	ldr	r2, [pc, #120]	; (80037d0 <USB_SetTurnaroundTime+0x12c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d306      	bcc.n	8003768 <USB_SetTurnaroundTime+0xc4>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4a1d      	ldr	r2, [pc, #116]	; (80037d4 <USB_SetTurnaroundTime+0x130>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d802      	bhi.n	8003768 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003762:	2308      	movs	r3, #8
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	e00f      	b.n	8003788 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4a1a      	ldr	r2, [pc, #104]	; (80037d4 <USB_SetTurnaroundTime+0x130>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d906      	bls.n	800377e <USB_SetTurnaroundTime+0xda>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4a19      	ldr	r2, [pc, #100]	; (80037d8 <USB_SetTurnaroundTime+0x134>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d202      	bcs.n	800377e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003778:	2307      	movs	r3, #7
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	e004      	b.n	8003788 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800377e:	2306      	movs	r3, #6
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	e001      	b.n	8003788 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003784:	2309      	movs	r3, #9
 8003786:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	029b      	lsls	r3, r3, #10
 800379c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80037a0:	431a      	orrs	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	00d8acbf 	.word	0x00d8acbf
 80037b8:	00e4e1c0 	.word	0x00e4e1c0
 80037bc:	00f42400 	.word	0x00f42400
 80037c0:	01067380 	.word	0x01067380
 80037c4:	011a499f 	.word	0x011a499f
 80037c8:	01312cff 	.word	0x01312cff
 80037cc:	014ca43f 	.word	0x014ca43f
 80037d0:	016e3600 	.word	0x016e3600
 80037d4:	01a6ab1f 	.word	0x01a6ab1f
 80037d8:	01e84800 	.word	0x01e84800

080037dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f043 0201 	orr.w	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f023 0201 	bic.w	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d115      	bne.n	800386e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800384e:	2001      	movs	r0, #1
 8003850:	f7fc ff08 	bl	8000664 <HAL_Delay>
      ms++;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	3301      	adds	r3, #1
 8003858:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f001 f985 	bl	8004b6a <USB_GetMode>
 8003860:	4603      	mov	r3, r0
 8003862:	2b01      	cmp	r3, #1
 8003864:	d01e      	beq.n	80038a4 <USB_SetCurrentMode+0x84>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b31      	cmp	r3, #49	; 0x31
 800386a:	d9f0      	bls.n	800384e <USB_SetCurrentMode+0x2e>
 800386c:	e01a      	b.n	80038a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d115      	bne.n	80038a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003880:	2001      	movs	r0, #1
 8003882:	f7fc feef 	bl	8000664 <HAL_Delay>
      ms++;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3301      	adds	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f001 f96c 	bl	8004b6a <USB_GetMode>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <USB_SetCurrentMode+0x84>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b31      	cmp	r3, #49	; 0x31
 800389c:	d9f0      	bls.n	8003880 <USB_SetCurrentMode+0x60>
 800389e:	e001      	b.n	80038a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e005      	b.n	80038b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b32      	cmp	r3, #50	; 0x32
 80038a8:	d101      	bne.n	80038ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038b8:	b084      	sub	sp, #16
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b086      	sub	sp, #24
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038d2:	2300      	movs	r3, #0
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	e009      	b.n	80038ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	3340      	adds	r3, #64	; 0x40
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	2200      	movs	r2, #0
 80038e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	3301      	adds	r3, #1
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	2b0e      	cmp	r3, #14
 80038f0:	d9f2      	bls.n	80038d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d11c      	bne.n	8003932 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003906:	f043 0302 	orr.w	r3, r3, #2
 800390a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	e005      	b.n	800393e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003944:	461a      	mov	r2, r3
 8003946:	2300      	movs	r3, #0
 8003948:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003950:	4619      	mov	r1, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003958:	461a      	mov	r2, r3
 800395a:	680b      	ldr	r3, [r1, #0]
 800395c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800395e:	2103      	movs	r1, #3
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f959 	bl	8003c18 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003966:	2110      	movs	r1, #16
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f8f1 	bl	8003b50 <USB_FlushTxFifo>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f91d 	bl	8003bb8 <USB_FlushRxFifo>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398e:	461a      	mov	r2, r3
 8003990:	2300      	movs	r3, #0
 8003992:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399a:	461a      	mov	r2, r3
 800399c:	2300      	movs	r3, #0
 800399e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a6:	461a      	mov	r2, r3
 80039a8:	2300      	movs	r3, #0
 80039aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039ac:	2300      	movs	r3, #0
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	e043      	b.n	8003a3a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039c8:	d118      	bne.n	80039fc <USB_DevInit+0x144>
    {
      if (i == 0U)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039dc:	461a      	mov	r2, r3
 80039de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	e013      	b.n	8003a0e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f2:	461a      	mov	r2, r3
 80039f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e008      	b.n	8003a0e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	3301      	adds	r3, #1
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d3b7      	bcc.n	80039b2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a42:	2300      	movs	r3, #0
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	e043      	b.n	8003ad0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a5e:	d118      	bne.n	8003a92 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10a      	bne.n	8003a7c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a72:	461a      	mov	r2, r3
 8003a74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	e013      	b.n	8003aa4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	e008      	b.n	8003aa4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ac8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	3301      	adds	r3, #1
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d3b7      	bcc.n	8003a48 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ae6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003af8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	f043 0210 	orr.w	r2, r3, #16
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <USB_DevInit+0x294>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	f043 0208 	orr.w	r2, r3, #8
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d107      	bne.n	8003b3a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b32:	f043 0304 	orr.w	r3, r3, #4
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b46:	b004      	add	sp, #16
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	803c3800 	.word	0x803c3800

08003b50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3301      	adds	r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4a13      	ldr	r2, [pc, #76]	; (8003bb4 <USB_FlushTxFifo+0x64>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d901      	bls.n	8003b70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e01b      	b.n	8003ba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	daf2      	bge.n	8003b5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	019b      	lsls	r3, r3, #6
 8003b80:	f043 0220 	orr.w	r2, r3, #32
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4a08      	ldr	r2, [pc, #32]	; (8003bb4 <USB_FlushTxFifo+0x64>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e006      	b.n	8003ba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	d0f0      	beq.n	8003b88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	00030d40 	.word	0x00030d40

08003bb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4a11      	ldr	r2, [pc, #68]	; (8003c14 <USB_FlushRxFifo+0x5c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e018      	b.n	8003c08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	daf2      	bge.n	8003bc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2210      	movs	r2, #16
 8003be6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3301      	adds	r3, #1
 8003bec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4a08      	ldr	r2, [pc, #32]	; (8003c14 <USB_FlushRxFifo+0x5c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d901      	bls.n	8003bfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e006      	b.n	8003c08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f003 0310 	and.w	r3, r3, #16
 8003c02:	2b10      	cmp	r3, #16
 8003c04:	d0f0      	beq.n	8003be8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	00030d40 	.word	0x00030d40

08003c18 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	68f9      	ldr	r1, [r7, #12]
 8003c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b087      	sub	sp, #28
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0306 	and.w	r3, r3, #6
 8003c62:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d002      	beq.n	8003c70 <USB_GetDevSpeed+0x26>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b06      	cmp	r3, #6
 8003c6e:	d102      	bne.n	8003c76 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c70:	2302      	movs	r3, #2
 8003c72:	75fb      	strb	r3, [r7, #23]
 8003c74:	e001      	b.n	8003c7a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8003c76:	230f      	movs	r3, #15
 8003c78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	785b      	ldrb	r3, [r3, #1]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d13a      	bne.n	8003d1a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003caa:	69da      	ldr	r2, [r3, #28]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	68f9      	ldr	r1, [r7, #12]
 8003cbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d155      	bne.n	8003d88 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	791b      	ldrb	r3, [r3, #4]
 8003cf6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cf8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	059b      	lsls	r3, r3, #22
 8003cfe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d00:	4313      	orrs	r3, r2
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	0151      	lsls	r1, r2, #5
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	440a      	add	r2, r1
 8003d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	e036      	b.n	8003d88 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d20:	69da      	ldr	r2, [r3, #28]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d30:	041b      	lsls	r3, r3, #16
 8003d32:	68f9      	ldr	r1, [r7, #12]
 8003d34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d11a      	bne.n	8003d88 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	791b      	ldrb	r3, [r3, #4]
 8003d6c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	4313      	orrs	r3, r2
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	0151      	lsls	r1, r2, #5
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	440a      	add	r2, r1
 8003d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d86:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	785b      	ldrb	r3, [r3, #1]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d161      	bne.n	8003e78 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dca:	d11f      	bne.n	8003e0c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	0151      	lsls	r1, r2, #5
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	440a      	add	r2, r1
 8003de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003de6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	0151      	lsls	r1, r2, #5
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	440a      	add	r2, r1
 8003e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	68f9      	ldr	r1, [r7, #12]
 8003e28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e36:	69da      	ldr	r2, [r3, #28]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	2101      	movs	r1, #1
 8003e42:	fa01 f303 	lsl.w	r3, r1, r3
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	68f9      	ldr	r1, [r7, #12]
 8003e4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e50:	4013      	ands	r3, r2
 8003e52:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	0159      	lsls	r1, r3, #5
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	440b      	add	r3, r1
 8003e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4b35      	ldr	r3, [pc, #212]	; (8003f48 <USB_DeactivateEndpoint+0x1b0>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	600b      	str	r3, [r1, #0]
 8003e76:	e060      	b.n	8003f3a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e8e:	d11f      	bne.n	8003ed0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	0151      	lsls	r1, r2, #5
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	440a      	add	r2, r1
 8003ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eaa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003eae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	0151      	lsls	r1, r2, #5
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	440a      	add	r2, r1
 8003ec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ece:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	68f9      	ldr	r1, [r7, #12]
 8003eec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efa:	69da      	ldr	r2, [r3, #28]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	2101      	movs	r1, #1
 8003f06:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0a:	041b      	lsls	r3, r3, #16
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	68f9      	ldr	r1, [r7, #12]
 8003f10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f14:	4013      	ands	r3, r2
 8003f16:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	0159      	lsls	r1, r3, #5
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	440b      	add	r3, r1
 8003f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f32:	4619      	mov	r1, r3
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <USB_DeactivateEndpoint+0x1b4>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	ec337800 	.word	0xec337800
 8003f4c:	eff37800 	.word	0xeff37800

08003f50 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	785b      	ldrb	r3, [r3, #1]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	f040 810a 	bne.w	8004182 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d132      	bne.n	8003fdc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	0151      	lsls	r1, r2, #5
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	440a      	add	r2, r1
 8003f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	0151      	lsls	r1, r2, #5
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	440a      	add	r2, r1
 8003fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	0151      	lsls	r1, r2, #5
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	440a      	add	r2, r1
 8003fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd4:	0cdb      	lsrs	r3, r3, #19
 8003fd6:	04db      	lsls	r3, r3, #19
 8003fd8:	6113      	str	r3, [r2, #16]
 8003fda:	e074      	b.n	80040c6 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	0151      	lsls	r1, r2, #5
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	440a      	add	r2, r1
 8003ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff6:	0cdb      	lsrs	r3, r3, #19
 8003ff8:	04db      	lsls	r3, r3, #19
 8003ffa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	0151      	lsls	r1, r2, #5
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	440a      	add	r2, r1
 8004012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004016:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800401a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800401e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	6999      	ldr	r1, [r3, #24]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	440b      	add	r3, r1
 8004038:	1e59      	subs	r1, r3, #1
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004042:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004044:	4bb1      	ldr	r3, [pc, #708]	; (800430c <USB_EPStartXfer+0x3bc>)
 8004046:	400b      	ands	r3, r1
 8004048:	6939      	ldr	r1, [r7, #16]
 800404a:	0148      	lsls	r0, r1, #5
 800404c:	6979      	ldr	r1, [r7, #20]
 800404e:	4401      	add	r1, r0
 8004050:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004054:	4313      	orrs	r3, r2
 8004056:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800406e:	6939      	ldr	r1, [r7, #16]
 8004070:	0148      	lsls	r0, r1, #5
 8004072:	6979      	ldr	r1, [r7, #20]
 8004074:	4401      	add	r1, r0
 8004076:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800407a:	4313      	orrs	r3, r2
 800407c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	791b      	ldrb	r3, [r3, #4]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d11f      	bne.n	80040c6 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	0151      	lsls	r1, r2, #5
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	440a      	add	r2, r1
 800409c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80040a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	0151      	lsls	r1, r2, #5
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	440a      	add	r2, r1
 80040bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040c4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	0151      	lsls	r1, r2, #5
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	440a      	add	r2, r1
 80040dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040e4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	791b      	ldrb	r3, [r3, #4]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d015      	beq.n	800411a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 8104 	beq.w	8004300 <USB_EPStartXfer+0x3b0>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	2101      	movs	r1, #1
 800410a:	fa01 f303 	lsl.w	r3, r1, r3
 800410e:	6979      	ldr	r1, [r7, #20]
 8004110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004114:	4313      	orrs	r3, r2
 8004116:	634b      	str	r3, [r1, #52]	; 0x34
 8004118:	e0f2      	b.n	8004300 <USB_EPStartXfer+0x3b0>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d110      	bne.n	800414c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	4413      	add	r3, r2
 8004132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	0151      	lsls	r1, r2, #5
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	440a      	add	r2, r1
 8004140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004144:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	e00f      	b.n	800416c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	0151      	lsls	r1, r2, #5
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	440a      	add	r2, r1
 8004162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	6919      	ldr	r1, [r3, #16]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	781a      	ldrb	r2, [r3, #0]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	b29b      	uxth	r3, r3
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fa94 	bl	80046a8 <USB_WritePacket>
 8004180:	e0be      	b.n	8004300 <USB_EPStartXfer+0x3b0>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	0151      	lsls	r1, r2, #5
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	440a      	add	r2, r1
 8004198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800419c:	0cdb      	lsrs	r3, r3, #19
 800419e:	04db      	lsls	r3, r3, #19
 80041a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	0151      	lsls	r1, r2, #5
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	440a      	add	r2, r1
 80041b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d123      	bne.n	8004216 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e4:	6939      	ldr	r1, [r7, #16]
 80041e6:	0148      	lsls	r0, r1, #5
 80041e8:	6979      	ldr	r1, [r7, #20]
 80041ea:	4401      	add	r1, r0
 80041ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041f0:	4313      	orrs	r3, r2
 80041f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	0151      	lsls	r1, r2, #5
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	440a      	add	r2, r1
 800420a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800420e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004212:	6113      	str	r3, [r2, #16]
 8004214:	e037      	b.n	8004286 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	4413      	add	r3, r2
 8004220:	1e5a      	subs	r2, r3, #1
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	fbb2 f3f3 	udiv	r3, r2, r3
 800422a:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	89fa      	ldrh	r2, [r7, #14]
 8004232:	fb02 f203 	mul.w	r2, r2, r3
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	89fb      	ldrh	r3, [r7, #14]
 800424a:	04d9      	lsls	r1, r3, #19
 800424c:	4b2f      	ldr	r3, [pc, #188]	; (800430c <USB_EPStartXfer+0x3bc>)
 800424e:	400b      	ands	r3, r1
 8004250:	6939      	ldr	r1, [r7, #16]
 8004252:	0148      	lsls	r0, r1, #5
 8004254:	6979      	ldr	r1, [r7, #20]
 8004256:	4401      	add	r1, r0
 8004258:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800425c:	4313      	orrs	r3, r2
 800425e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004276:	6939      	ldr	r1, [r7, #16]
 8004278:	0148      	lsls	r0, r1, #5
 800427a:	6979      	ldr	r1, [r7, #20]
 800427c:	4401      	add	r1, r0
 800427e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004282:	4313      	orrs	r3, r2
 8004284:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	791b      	ldrb	r3, [r3, #4]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d128      	bne.n	80042e0 <USB_EPStartXfer+0x390>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429a:	2b00      	cmp	r3, #0
 800429c:	d110      	bne.n	80042c0 <USB_EPStartXfer+0x370>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	0151      	lsls	r1, r2, #5
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	440a      	add	r2, r1
 80042b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	e00f      	b.n	80042e0 <USB_EPStartXfer+0x390>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	0151      	lsls	r1, r2, #5
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	440a      	add	r2, r1
 80042d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	0151      	lsls	r1, r2, #5
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	440a      	add	r2, r1
 80042f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	1ff80000 	.word	0x1ff80000

08004310 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	785b      	ldrb	r3, [r3, #1]
 8004328:	2b01      	cmp	r3, #1
 800432a:	f040 80ab 	bne.w	8004484 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d132      	bne.n	800439c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	0151      	lsls	r1, r2, #5
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	440a      	add	r2, r1
 800434c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004350:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004354:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004358:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	0151      	lsls	r1, r2, #5
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	440a      	add	r2, r1
 8004370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004374:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004378:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	0151      	lsls	r1, r2, #5
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	440a      	add	r2, r1
 8004390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004394:	0cdb      	lsrs	r3, r3, #19
 8004396:	04db      	lsls	r3, r3, #19
 8004398:	6113      	str	r3, [r2, #16]
 800439a:	e04e      	b.n	800443a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	0151      	lsls	r1, r2, #5
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	440a      	add	r2, r1
 80043b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b6:	0cdb      	lsrs	r3, r3, #19
 80043b8:	04db      	lsls	r3, r3, #19
 80043ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	0151      	lsls	r1, r2, #5
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	440a      	add	r2, r1
 80043d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	699a      	ldr	r2, [r3, #24]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d903      	bls.n	80043f4 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	0151      	lsls	r1, r2, #5
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	440a      	add	r2, r1
 800440a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800440e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004412:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800442a:	68b9      	ldr	r1, [r7, #8]
 800442c:	0148      	lsls	r0, r1, #5
 800442e:	68f9      	ldr	r1, [r7, #12]
 8004430:	4401      	add	r1, r0
 8004432:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004436:	4313      	orrs	r3, r2
 8004438:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	0151      	lsls	r1, r2, #5
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	440a      	add	r2, r1
 8004450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004454:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004458:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d071      	beq.n	8004546 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	2101      	movs	r1, #1
 8004474:	fa01 f303 	lsl.w	r3, r1, r3
 8004478:	68f9      	ldr	r1, [r7, #12]
 800447a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800447e:	4313      	orrs	r3, r2
 8004480:	634b      	str	r3, [r1, #52]	; 0x34
 8004482:	e060      	b.n	8004546 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	0151      	lsls	r1, r2, #5
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	440a      	add	r2, r1
 800449a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800449e:	0cdb      	lsrs	r3, r3, #19
 80044a0:	04db      	lsls	r3, r3, #19
 80044a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	0151      	lsls	r1, r2, #5
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	440a      	add	r2, r1
 80044ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044c6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	0151      	lsls	r1, r2, #5
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	440a      	add	r2, r1
 80044f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004516:	68b9      	ldr	r1, [r7, #8]
 8004518:	0148      	lsls	r0, r1, #5
 800451a:	68f9      	ldr	r1, [r7, #12]
 800451c:	4401      	add	r1, r0
 800451e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004522:	4313      	orrs	r3, r2
 8004524:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4413      	add	r3, r2
 800452e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	0151      	lsls	r1, r2, #5
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	440a      	add	r2, r1
 800453c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004540:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004544:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	785b      	ldrb	r3, [r3, #1]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d14a      	bne.n	8004608 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004586:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800458a:	f040 8086 	bne.w	800469a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	7812      	ldrb	r2, [r2, #0]
 80045a2:	0151      	lsls	r1, r2, #5
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	440a      	add	r2, r1
 80045a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	7812      	ldrb	r2, [r2, #0]
 80045c6:	0151      	lsls	r1, r2, #5
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	440a      	add	r2, r1
 80045cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	3301      	adds	r3, #1
 80045da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f242 7210 	movw	r2, #10000	; 0x2710
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d902      	bls.n	80045ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	75fb      	strb	r3, [r7, #23]
          break;
 80045ea:	e056      	b.n	800469a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004600:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004604:	d0e7      	beq.n	80045d6 <USB_EPStopXfer+0x82>
 8004606:	e048      	b.n	800469a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800461c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004620:	d13b      	bne.n	800469a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	7812      	ldrb	r2, [r2, #0]
 8004636:	0151      	lsls	r1, r2, #5
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	440a      	add	r2, r1
 800463c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004640:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004644:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	7812      	ldrb	r2, [r2, #0]
 800465a:	0151      	lsls	r1, r2, #5
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	440a      	add	r2, r1
 8004660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004664:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004668:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	3301      	adds	r3, #1
 800466e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f242 7210 	movw	r2, #10000	; 0x2710
 8004676:	4293      	cmp	r3, r2
 8004678:	d902      	bls.n	8004680 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	75fb      	strb	r3, [r7, #23]
          break;
 800467e:	e00c      	b.n	800469a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004698:	d0e7      	beq.n	800466a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800469a:	7dfb      	ldrb	r3, [r7, #23]
}
 800469c:	4618      	mov	r0, r3
 800469e:	371c      	adds	r7, #28
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b089      	sub	sp, #36	; 0x24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	4611      	mov	r1, r2
 80046b4:	461a      	mov	r2, r3
 80046b6:	460b      	mov	r3, r1
 80046b8:	71fb      	strb	r3, [r7, #7]
 80046ba:	4613      	mov	r3, r2
 80046bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80046c6:	88bb      	ldrh	r3, [r7, #4]
 80046c8:	3303      	adds	r3, #3
 80046ca:	089b      	lsrs	r3, r3, #2
 80046cc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80046ce:	2300      	movs	r3, #0
 80046d0:	61bb      	str	r3, [r7, #24]
 80046d2:	e018      	b.n	8004706 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046d4:	79fb      	ldrb	r3, [r7, #7]
 80046d6:	031a      	lsls	r2, r3, #12
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e0:	461a      	mov	r2, r3
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6013      	str	r3, [r2, #0]
    pSrc++;
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	3301      	adds	r3, #1
 80046ec:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	3301      	adds	r3, #1
 80046f2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	3301      	adds	r3, #1
 80046f8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3301      	adds	r3, #1
 80046fe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	3301      	adds	r3, #1
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	429a      	cmp	r2, r3
 800470c:	d3e2      	bcc.n	80046d4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3724      	adds	r7, #36	; 0x24
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800471c:	b480      	push	{r7}
 800471e:	b08b      	sub	sp, #44	; 0x2c
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	4613      	mov	r3, r2
 8004728:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	089b      	lsrs	r3, r3, #2
 8004736:	b29b      	uxth	r3, r3
 8004738:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800473a:	88fb      	ldrh	r3, [r7, #6]
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004742:	2300      	movs	r3, #0
 8004744:	623b      	str	r3, [r7, #32]
 8004746:	e014      	b.n	8004772 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	601a      	str	r2, [r3, #0]
    pDest++;
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	3301      	adds	r3, #1
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	3301      	adds	r3, #1
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	3301      	adds	r3, #1
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	3301      	adds	r3, #1
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	3301      	adds	r3, #1
 8004770:	623b      	str	r3, [r7, #32]
 8004772:	6a3a      	ldr	r2, [r7, #32]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	429a      	cmp	r2, r3
 8004778:	d3e6      	bcc.n	8004748 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800477a:	8bfb      	ldrh	r3, [r7, #30]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01e      	beq.n	80047be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800478a:	461a      	mov	r2, r3
 800478c:	f107 0310 	add.w	r3, r7, #16
 8004790:	6812      	ldr	r2, [r2, #0]
 8004792:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	fa22 f303 	lsr.w	r3, r2, r3
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	701a      	strb	r2, [r3, #0]
      i++;
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	3301      	adds	r3, #1
 80047aa:	623b      	str	r3, [r7, #32]
      pDest++;
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	3301      	adds	r3, #1
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80047b2:	8bfb      	ldrh	r3, [r7, #30]
 80047b4:	3b01      	subs	r3, #1
 80047b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80047b8:	8bfb      	ldrh	r3, [r7, #30]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1ea      	bne.n	8004794 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	372c      	adds	r7, #44	; 0x2c
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	785b      	ldrb	r3, [r3, #1]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d12c      	bne.n	8004842 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	db12      	blt.n	8004820 <USB_EPSetStall+0x54>
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00f      	beq.n	8004820 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	0151      	lsls	r1, r2, #5
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	440a      	add	r2, r1
 8004816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800481a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800481e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	0151      	lsls	r1, r2, #5
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	440a      	add	r2, r1
 8004836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800483a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	e02b      	b.n	800489a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	db12      	blt.n	800487a <USB_EPSetStall+0xae>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00f      	beq.n	800487a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	0151      	lsls	r1, r2, #5
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	440a      	add	r2, r1
 8004870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004874:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004878:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	4413      	add	r3, r2
 8004882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	0151      	lsls	r1, r2, #5
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	440a      	add	r2, r1
 8004890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004894:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004898:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	785b      	ldrb	r3, [r3, #1]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d128      	bne.n	8004916 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	0151      	lsls	r1, r2, #5
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	440a      	add	r2, r1
 80048da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	791b      	ldrb	r3, [r3, #4]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d003      	beq.n	80048f4 <USB_EPClearStall+0x4c>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	791b      	ldrb	r3, [r3, #4]
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d138      	bne.n	8004966 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	0151      	lsls	r1, r2, #5
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	440a      	add	r2, r1
 800490a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800490e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	e027      	b.n	8004966 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	0151      	lsls	r1, r2, #5
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	440a      	add	r2, r1
 800492c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004930:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004934:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	791b      	ldrb	r3, [r3, #4]
 800493a:	2b03      	cmp	r3, #3
 800493c:	d003      	beq.n	8004946 <USB_EPClearStall+0x9e>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	791b      	ldrb	r3, [r3, #4]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d10f      	bne.n	8004966 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	0151      	lsls	r1, r2, #5
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	440a      	add	r2, r1
 800495c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004964:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004992:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004996:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80049a8:	68f9      	ldr	r1, [r7, #12]
 80049aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049ae:	4313      	orrs	r3, r2
 80049b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049da:	f023 0303 	bic.w	r3, r3, #3
 80049de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ee:	f023 0302 	bic.w	r3, r3, #2
 80049f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b085      	sub	sp, #20
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a1c:	f023 0303 	bic.w	r3, r3, #3
 8004a20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a30:	f043 0302 	orr.w	r3, r3, #2
 8004a34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b085      	sub	sp, #20
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	0c1b      	lsrs	r3, r3, #16
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	b29b      	uxth	r3, r3
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b085      	sub	sp, #20
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	460b      	mov	r3, r1
 8004adc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004ae2:	78fb      	ldrb	r3, [r7, #3]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	4013      	ands	r3, r2
 8004afe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b00:	68bb      	ldr	r3, [r7, #8]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b087      	sub	sp, #28
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	460b      	mov	r3, r1
 8004b18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b30:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004b32:	78fb      	ldrb	r3, [r7, #3]
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3e:	01db      	lsls	r3, r3, #7
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	371c      	adds	r7, #28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f003 0301 	and.w	r3, r3, #1
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b085      	sub	sp, #20
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004ba4:	f023 0307 	bic.w	r3, r3, #7
 8004ba8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	333c      	adds	r3, #60	; 0x3c
 8004bde:	3304      	adds	r3, #4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4a1c      	ldr	r2, [pc, #112]	; (8004c58 <USB_EP0_OutStart+0x8c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d90a      	bls.n	8004c02 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bfc:	d101      	bne.n	8004c02 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e024      	b.n	8004c4c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c08:	461a      	mov	r2, r3
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c30:	f043 0318 	orr.w	r3, r3, #24
 8004c34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c44:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004c48:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	4f54300a 	.word	0x4f54300a

08004c5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4a13      	ldr	r2, [pc, #76]	; (8004cc0 <USB_CoreReset+0x64>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d901      	bls.n	8004c7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e01b      	b.n	8004cb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	daf2      	bge.n	8004c68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f043 0201 	orr.w	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3301      	adds	r3, #1
 8004c96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4a09      	ldr	r2, [pc, #36]	; (8004cc0 <USB_CoreReset+0x64>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d901      	bls.n	8004ca4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e006      	b.n	8004cb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d0f0      	beq.n	8004c92 <USB_CoreReset+0x36>

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	00030d40 	.word	0x00030d40

08004cc4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004cd0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004cd4:	f002 fac2 	bl	800725c <USBD_static_malloc>
 8004cd8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d105      	bne.n	8004cec <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e066      	b.n	8004dba <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	7c1b      	ldrb	r3, [r3, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d119      	bne.n	8004d30 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d00:	2202      	movs	r2, #2
 8004d02:	2181      	movs	r1, #129	; 0x81
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f002 f895 	bl	8006e34 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d14:	2202      	movs	r2, #2
 8004d16:	2101      	movs	r1, #1
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f002 f88b 	bl	8006e34 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2210      	movs	r2, #16
 8004d2a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004d2e:	e016      	b.n	8004d5e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d30:	2340      	movs	r3, #64	; 0x40
 8004d32:	2202      	movs	r2, #2
 8004d34:	2181      	movs	r1, #129	; 0x81
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f002 f87c 	bl	8006e34 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d42:	2340      	movs	r3, #64	; 0x40
 8004d44:	2202      	movs	r2, #2
 8004d46:	2101      	movs	r1, #1
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f002 f873 	bl	8006e34 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2210      	movs	r2, #16
 8004d5a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004d5e:	2308      	movs	r3, #8
 8004d60:	2203      	movs	r2, #3
 8004d62:	2182      	movs	r1, #130	; 0x82
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f002 f865 	bl	8006e34 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	7c1b      	ldrb	r3, [r3, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d109      	bne.n	8004da8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d9e:	2101      	movs	r1, #1
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f002 f9c1 	bl	8007128 <USBD_LL_PrepareReceive>
 8004da6:	e007      	b.n	8004db8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004dae:	2340      	movs	r3, #64	; 0x40
 8004db0:	2101      	movs	r1, #1
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f002 f9b8 	bl	8007128 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	460b      	mov	r3, r1
 8004dcc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004dce:	2181      	movs	r1, #129	; 0x81
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f002 f86d 	bl	8006eb0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004ddc:	2101      	movs	r1, #1
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f002 f866 	bl	8006eb0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004dec:	2182      	movs	r1, #130	; 0x82
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f002 f85e 	bl	8006eb0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00e      	beq.n	8004e2c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f002 fa2a 	bl	8007278 <USBD_static_free>
    pdev->pClassData = NULL;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
	...

08004e38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e48:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e0af      	b.n	8004fc0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d03f      	beq.n	8004eec <USBD_CDC_Setup+0xb4>
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	f040 809f 	bne.w	8004fb0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	88db      	ldrh	r3, [r3, #6]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d02e      	beq.n	8004ed8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	b25b      	sxtb	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	da16      	bge.n	8004eb2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004e90:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	88d2      	ldrh	r2, [r2, #6]
 8004e96:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	88db      	ldrh	r3, [r3, #6]
 8004e9c:	2b07      	cmp	r3, #7
 8004e9e:	bf28      	it	cs
 8004ea0:	2307      	movcs	r3, #7
 8004ea2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	89fa      	ldrh	r2, [r7, #14]
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f001 fb43 	bl	8006536 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004eb0:	e085      	b.n	8004fbe <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	785a      	ldrb	r2, [r3, #1]
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	88db      	ldrh	r3, [r3, #6]
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004ec8:	6939      	ldr	r1, [r7, #16]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	88db      	ldrh	r3, [r3, #6]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f001 fb5c 	bl	800658e <USBD_CtlPrepareRx>
      break;
 8004ed6:	e072      	b.n	8004fbe <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	7850      	ldrb	r0, [r2, #1]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	6839      	ldr	r1, [r7, #0]
 8004ee8:	4798      	blx	r3
      break;
 8004eea:	e068      	b.n	8004fbe <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	785b      	ldrb	r3, [r3, #1]
 8004ef0:	2b0b      	cmp	r3, #11
 8004ef2:	d852      	bhi.n	8004f9a <USBD_CDC_Setup+0x162>
 8004ef4:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <USBD_CDC_Setup+0xc4>)
 8004ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efa:	bf00      	nop
 8004efc:	08004f2d 	.word	0x08004f2d
 8004f00:	08004fa9 	.word	0x08004fa9
 8004f04:	08004f9b 	.word	0x08004f9b
 8004f08:	08004f9b 	.word	0x08004f9b
 8004f0c:	08004f9b 	.word	0x08004f9b
 8004f10:	08004f9b 	.word	0x08004f9b
 8004f14:	08004f9b 	.word	0x08004f9b
 8004f18:	08004f9b 	.word	0x08004f9b
 8004f1c:	08004f9b 	.word	0x08004f9b
 8004f20:	08004f9b 	.word	0x08004f9b
 8004f24:	08004f57 	.word	0x08004f57
 8004f28:	08004f81 	.word	0x08004f81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d107      	bne.n	8004f48 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004f38:	f107 030a 	add.w	r3, r7, #10
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	4619      	mov	r1, r3
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f001 faf8 	bl	8006536 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f46:	e032      	b.n	8004fae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004f48:	6839      	ldr	r1, [r7, #0]
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f001 fa82 	bl	8006454 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f50:	2303      	movs	r3, #3
 8004f52:	75fb      	strb	r3, [r7, #23]
          break;
 8004f54:	e02b      	b.n	8004fae <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d107      	bne.n	8004f72 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004f62:	f107 030d 	add.w	r3, r7, #13
 8004f66:	2201      	movs	r2, #1
 8004f68:	4619      	mov	r1, r3
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f001 fae3 	bl	8006536 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f70:	e01d      	b.n	8004fae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004f72:	6839      	ldr	r1, [r7, #0]
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f001 fa6d 	bl	8006454 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8004f7e:	e016      	b.n	8004fae <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d00f      	beq.n	8004fac <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004f8c:	6839      	ldr	r1, [r7, #0]
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f001 fa60 	bl	8006454 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f94:	2303      	movs	r3, #3
 8004f96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004f98:	e008      	b.n	8004fac <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004f9a:	6839      	ldr	r1, [r7, #0]
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f001 fa59 	bl	8006454 <USBD_CtlError>
          ret = USBD_FAIL;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	75fb      	strb	r3, [r7, #23]
          break;
 8004fa6:	e002      	b.n	8004fae <USBD_CDC_Setup+0x176>
          break;
 8004fa8:	bf00      	nop
 8004faa:	e008      	b.n	8004fbe <USBD_CDC_Setup+0x186>
          break;
 8004fac:	bf00      	nop
      }
      break;
 8004fae:	e006      	b.n	8004fbe <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004fb0:	6839      	ldr	r1, [r7, #0]
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f001 fa4e 	bl	8006454 <USBD_CtlError>
      ret = USBD_FAIL;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	75fb      	strb	r3, [r7, #23]
      break;
 8004fbc:	bf00      	nop
  }

  return (uint8_t)ret;
 8004fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004fda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e04f      	b.n	800508a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ff0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004ff2:	78fa      	ldrb	r2, [r7, #3]
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	440b      	add	r3, r1
 8005000:	3318      	adds	r3, #24
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d029      	beq.n	800505c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005008:	78fa      	ldrb	r2, [r7, #3]
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	3318      	adds	r3, #24
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	78f9      	ldrb	r1, [r7, #3]
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	460b      	mov	r3, r1
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	440b      	add	r3, r1
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4403      	add	r3, r0
 8005028:	3348      	adds	r3, #72	; 0x48
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005030:	fb03 f301 	mul.w	r3, r3, r1
 8005034:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005036:	2b00      	cmp	r3, #0
 8005038:	d110      	bne.n	800505c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800503a:	78fa      	ldrb	r2, [r7, #3]
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	440b      	add	r3, r1
 8005048:	3318      	adds	r3, #24
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800504e:	78f9      	ldrb	r1, [r7, #3]
 8005050:	2300      	movs	r3, #0
 8005052:	2200      	movs	r2, #0
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f002 f82f 	bl	80070b8 <USBD_LL_Transmit>
 800505a:	e015      	b.n	8005088 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2200      	movs	r2, #0
 8005060:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00b      	beq.n	8005088 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005084:	78fa      	ldrb	r2, [r7, #3]
 8005086:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	460b      	mov	r3, r1
 800509c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e015      	b.n	80050e0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80050b4:	78fb      	ldrb	r3, [r7, #3]
 80050b6:	4619      	mov	r1, r3
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f002 f86d 	bl	8007198 <USBD_LL_GetRxDataSize>
 80050be:	4602      	mov	r2, r0
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80050da:	4611      	mov	r1, r2
 80050dc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80050fe:	2303      	movs	r3, #3
 8005100:	e01b      	b.n	800513a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d015      	beq.n	8005138 <USBD_CDC_EP0_RxReady+0x50>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005112:	2bff      	cmp	r3, #255	; 0xff
 8005114:	d010      	beq.n	8005138 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005124:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800512c:	b292      	uxth	r2, r2
 800512e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	22ff      	movs	r2, #255	; 0xff
 8005134:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2243      	movs	r2, #67	; 0x43
 8005150:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005152:	4b03      	ldr	r3, [pc, #12]	; (8005160 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005154:	4618      	mov	r0, r3
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	20000094 	.word	0x20000094

08005164 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2243      	movs	r2, #67	; 0x43
 8005170:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005172:	4b03      	ldr	r3, [pc, #12]	; (8005180 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005174:	4618      	mov	r0, r3
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	20000050 	.word	0x20000050

08005184 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2243      	movs	r2, #67	; 0x43
 8005190:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005192:	4b03      	ldr	r3, [pc, #12]	; (80051a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005194:	4618      	mov	r0, r3
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	200000d8 	.word	0x200000d8

080051a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	220a      	movs	r2, #10
 80051b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80051b2:	4b03      	ldr	r3, [pc, #12]	; (80051c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	2000000c 	.word	0x2000000c

080051c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e004      	b.n	80051e2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b087      	sub	sp, #28
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005200:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005208:	2303      	movs	r3, #3
 800520a:	e008      	b.n	800521e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	371c      	adds	r7, #28
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800523a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005242:	2303      	movs	r3, #3
 8005244:	e004      	b.n	8005250 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800526a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800526c:	2301      	movs	r3, #1
 800526e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800527a:	2303      	movs	r3, #3
 800527c:	e01a      	b.n	80052b4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005284:	2b00      	cmp	r3, #0
 8005286:	d114      	bne.n	80052b2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2201      	movs	r2, #1
 800528c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80052a6:	2181      	movs	r1, #129	; 0x81
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f001 ff05 	bl	80070b8 <USBD_LL_Transmit>

    ret = USBD_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e016      	b.n	8005308 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	7c1b      	ldrb	r3, [r3, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d109      	bne.n	80052f6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052ec:	2101      	movs	r1, #1
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f001 ff1a 	bl	8007128 <USBD_LL_PrepareReceive>
 80052f4:	e007      	b.n	8005306 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052fc:	2340      	movs	r3, #64	; 0x40
 80052fe:	2101      	movs	r1, #1
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f001 ff11 	bl	8007128 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	4613      	mov	r3, r2
 800531c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005324:	2303      	movs	r3, #3
 8005326:	e01f      	b.n	8005368 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	79fa      	ldrb	r2, [r7, #7]
 800535a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f001 fceb 	bl	8006d38 <USBD_LL_Init>
 8005362:	4603      	mov	r3, r0
 8005364:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005366:	7dfb      	ldrb	r3, [r7, #23]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005384:	2303      	movs	r3, #3
 8005386:	e016      	b.n	80053b6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00b      	beq.n	80053b4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a4:	f107 020e 	add.w	r2, r7, #14
 80053a8:	4610      	mov	r0, r2
 80053aa:	4798      	blx	r3
 80053ac:	4602      	mov	r2, r0
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b082      	sub	sp, #8
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f001 fd02 	bl	8006dd0 <USBD_LL_Start>
 80053cc:	4603      	mov	r3, r0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	460b      	mov	r3, r1
 80053f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80053f8:	2303      	movs	r3, #3
 80053fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	78fa      	ldrb	r2, [r7, #3]
 8005410:	4611      	mov	r1, r2
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	4798      	blx	r3
 8005416:	4603      	mov	r3, r0
 8005418:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800541a:	7bfb      	ldrb	r3, [r7, #15]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005436:	2b00      	cmp	r3, #0
 8005438:	d007      	beq.n	800544a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	78fa      	ldrb	r2, [r7, #3]
 8005444:	4611      	mov	r1, r2
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	4798      	blx	r3
  }

  return USBD_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005464:	6839      	ldr	r1, [r7, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 ffba 	bl	80063e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800547a:	461a      	mov	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005488:	f003 031f 	and.w	r3, r3, #31
 800548c:	2b02      	cmp	r3, #2
 800548e:	d01a      	beq.n	80054c6 <USBD_LL_SetupStage+0x72>
 8005490:	2b02      	cmp	r3, #2
 8005492:	d822      	bhi.n	80054da <USBD_LL_SetupStage+0x86>
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <USBD_LL_SetupStage+0x4a>
 8005498:	2b01      	cmp	r3, #1
 800549a:	d00a      	beq.n	80054b2 <USBD_LL_SetupStage+0x5e>
 800549c:	e01d      	b.n	80054da <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80054a4:	4619      	mov	r1, r3
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fa62 	bl	8005970 <USBD_StdDevReq>
 80054ac:	4603      	mov	r3, r0
 80054ae:	73fb      	strb	r3, [r7, #15]
      break;
 80054b0:	e020      	b.n	80054f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80054b8:	4619      	mov	r1, r3
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fac6 	bl	8005a4c <USBD_StdItfReq>
 80054c0:	4603      	mov	r3, r0
 80054c2:	73fb      	strb	r3, [r7, #15]
      break;
 80054c4:	e016      	b.n	80054f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fb05 	bl	8005ade <USBD_StdEPReq>
 80054d4:	4603      	mov	r3, r0
 80054d6:	73fb      	strb	r3, [r7, #15]
      break;
 80054d8:	e00c      	b.n	80054f4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80054e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f001 fd17 	bl	8006f1c <USBD_LL_StallEP>
 80054ee:	4603      	mov	r3, r0
 80054f0:	73fb      	strb	r3, [r7, #15]
      break;
 80054f2:	bf00      	nop
  }

  return ret;
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b086      	sub	sp, #24
 8005502:	af00      	add	r7, sp, #0
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	460b      	mov	r3, r1
 8005508:	607a      	str	r2, [r7, #4]
 800550a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800550c:	7afb      	ldrb	r3, [r7, #11]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d138      	bne.n	8005584 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005518:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005520:	2b03      	cmp	r3, #3
 8005522:	d14a      	bne.n	80055ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	429a      	cmp	r2, r3
 800552e:	d913      	bls.n	8005558 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	1ad2      	subs	r2, r2, r3
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	4293      	cmp	r3, r2
 8005548:	bf28      	it	cs
 800554a:	4613      	movcs	r3, r2
 800554c:	461a      	mov	r2, r3
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f001 f839 	bl	80065c8 <USBD_CtlContinueRx>
 8005556:	e030      	b.n	80055ba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b03      	cmp	r3, #3
 8005562:	d10b      	bne.n	800557c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f001 f834 	bl	80065ea <USBD_CtlSendStatus>
 8005582:	e01a      	b.n	80055ba <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b03      	cmp	r3, #3
 800558e:	d114      	bne.n	80055ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00e      	beq.n	80055ba <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	7afa      	ldrb	r2, [r7, #11]
 80055a6:	4611      	mov	r1, r2
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	4798      	blx	r3
 80055ac:	4603      	mov	r3, r0
 80055ae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80055b6:	7dfb      	ldrb	r3, [r7, #23]
 80055b8:	e000      	b.n	80055bc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	460b      	mov	r3, r1
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80055d2:	7afb      	ldrb	r3, [r7, #11]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d16b      	bne.n	80056b0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	3314      	adds	r3, #20
 80055dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d156      	bne.n	8005696 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d914      	bls.n	800561e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	1ad2      	subs	r2, r2, r3
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	461a      	mov	r2, r3
 8005608:	6879      	ldr	r1, [r7, #4]
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 ffae 	bl	800656c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005610:	2300      	movs	r3, #0
 8005612:	2200      	movs	r2, #0
 8005614:	2100      	movs	r1, #0
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f001 fd86 	bl	8007128 <USBD_LL_PrepareReceive>
 800561c:	e03b      	b.n	8005696 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	429a      	cmp	r2, r3
 8005628:	d11c      	bne.n	8005664 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005632:	429a      	cmp	r2, r3
 8005634:	d316      	bcc.n	8005664 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005640:	429a      	cmp	r2, r3
 8005642:	d20f      	bcs.n	8005664 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005644:	2200      	movs	r2, #0
 8005646:	2100      	movs	r1, #0
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 ff8f 	bl	800656c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005656:	2300      	movs	r3, #0
 8005658:	2200      	movs	r2, #0
 800565a:	2100      	movs	r1, #0
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f001 fd63 	bl	8007128 <USBD_LL_PrepareReceive>
 8005662:	e018      	b.n	8005696 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b03      	cmp	r3, #3
 800566e:	d10b      	bne.n	8005688 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d005      	beq.n	8005688 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005688:	2180      	movs	r1, #128	; 0x80
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f001 fc46 	bl	8006f1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 ffbd 	bl	8006610 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800569c:	2b01      	cmp	r3, #1
 800569e:	d122      	bne.n	80056e6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f7ff fe98 	bl	80053d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80056ae:	e01a      	b.n	80056e6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d114      	bne.n	80056e6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00e      	beq.n	80056e6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	7afa      	ldrb	r2, [r7, #11]
 80056d2:	4611      	mov	r1, r2
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	4798      	blx	r3
 80056d8:	4603      	mov	r3, r0
 80056da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80056dc:	7dfb      	ldrb	r3, [r7, #23]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80056e2:	7dfb      	ldrb	r3, [r7, #23]
 80056e4:	e000      	b.n	80056e8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005720:	2303      	movs	r3, #3
 8005722:	e02f      	b.n	8005784 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00f      	beq.n	800574e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d009      	beq.n	800574e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6852      	ldr	r2, [r2, #4]
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	4611      	mov	r1, r2
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800574e:	2340      	movs	r3, #64	; 0x40
 8005750:	2200      	movs	r2, #0
 8005752:	2100      	movs	r1, #0
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f001 fb6d 	bl	8006e34 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2240      	movs	r2, #64	; 0x40
 8005766:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800576a:	2340      	movs	r3, #64	; 0x40
 800576c:	2200      	movs	r2, #0
 800576e:	2180      	movs	r1, #128	; 0x80
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f001 fb5f 	bl	8006e34 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2240      	movs	r2, #64	; 0x40
 8005780:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	78fa      	ldrb	r2, [r7, #3]
 800579c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2204      	movs	r2, #4
 80057c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d106      	bne.n	80057fa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800581a:	2303      	movs	r3, #3
 800581c:	e012      	b.n	8005844 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b03      	cmp	r3, #3
 8005828:	d10b      	bne.n	8005842 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d005      	beq.n	8005842 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005862:	2303      	movs	r3, #3
 8005864:	e014      	b.n	8005890 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b03      	cmp	r3, #3
 8005870:	d10d      	bne.n	800588e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	78fa      	ldrb	r2, [r7, #3]
 8005888:	4611      	mov	r1, r2
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e014      	b.n	80058dc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d10d      	bne.n	80058da <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d007      	beq.n	80058da <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	78fa      	ldrb	r2, [r7, #3]
 80058d4:	4611      	mov	r1, r2
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b082      	sub	sp, #8
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005910:	2b00      	cmp	r3, #0
 8005912:	d009      	beq.n	8005928 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6852      	ldr	r2, [r2, #4]
 8005920:	b2d2      	uxtb	r2, r2
 8005922:	4611      	mov	r1, r2
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	4798      	blx	r3
  }

  return USBD_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005932:	b480      	push	{r7}
 8005934:	b087      	sub	sp, #28
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	3301      	adds	r3, #1
 8005948:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005950:	8a3b      	ldrh	r3, [r7, #16]
 8005952:	021b      	lsls	r3, r3, #8
 8005954:	b21a      	sxth	r2, r3
 8005956:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800595a:	4313      	orrs	r3, r2
 800595c:	b21b      	sxth	r3, r3
 800595e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005960:	89fb      	ldrh	r3, [r7, #14]
}
 8005962:	4618      	mov	r0, r3
 8005964:	371c      	adds	r7, #28
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
	...

08005970 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005986:	2b40      	cmp	r3, #64	; 0x40
 8005988:	d005      	beq.n	8005996 <USBD_StdDevReq+0x26>
 800598a:	2b40      	cmp	r3, #64	; 0x40
 800598c:	d853      	bhi.n	8005a36 <USBD_StdDevReq+0xc6>
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00b      	beq.n	80059aa <USBD_StdDevReq+0x3a>
 8005992:	2b20      	cmp	r3, #32
 8005994:	d14f      	bne.n	8005a36 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	4798      	blx	r3
 80059a4:	4603      	mov	r3, r0
 80059a6:	73fb      	strb	r3, [r7, #15]
      break;
 80059a8:	e04a      	b.n	8005a40 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	785b      	ldrb	r3, [r3, #1]
 80059ae:	2b09      	cmp	r3, #9
 80059b0:	d83b      	bhi.n	8005a2a <USBD_StdDevReq+0xba>
 80059b2:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <USBD_StdDevReq+0x48>)
 80059b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b8:	08005a0d 	.word	0x08005a0d
 80059bc:	08005a21 	.word	0x08005a21
 80059c0:	08005a2b 	.word	0x08005a2b
 80059c4:	08005a17 	.word	0x08005a17
 80059c8:	08005a2b 	.word	0x08005a2b
 80059cc:	080059eb 	.word	0x080059eb
 80059d0:	080059e1 	.word	0x080059e1
 80059d4:	08005a2b 	.word	0x08005a2b
 80059d8:	08005a03 	.word	0x08005a03
 80059dc:	080059f5 	.word	0x080059f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80059e0:	6839      	ldr	r1, [r7, #0]
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f9de 	bl	8005da4 <USBD_GetDescriptor>
          break;
 80059e8:	e024      	b.n	8005a34 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80059ea:	6839      	ldr	r1, [r7, #0]
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fb6d 	bl	80060cc <USBD_SetAddress>
          break;
 80059f2:	e01f      	b.n	8005a34 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fbac 	bl	8006154 <USBD_SetConfig>
 80059fc:	4603      	mov	r3, r0
 80059fe:	73fb      	strb	r3, [r7, #15]
          break;
 8005a00:	e018      	b.n	8005a34 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005a02:	6839      	ldr	r1, [r7, #0]
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fc4b 	bl	80062a0 <USBD_GetConfig>
          break;
 8005a0a:	e013      	b.n	8005a34 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fc7c 	bl	800630c <USBD_GetStatus>
          break;
 8005a14:	e00e      	b.n	8005a34 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005a16:	6839      	ldr	r1, [r7, #0]
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fcab 	bl	8006374 <USBD_SetFeature>
          break;
 8005a1e:	e009      	b.n	8005a34 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005a20:	6839      	ldr	r1, [r7, #0]
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fcba 	bl	800639c <USBD_ClrFeature>
          break;
 8005a28:	e004      	b.n	8005a34 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fd11 	bl	8006454 <USBD_CtlError>
          break;
 8005a32:	bf00      	nop
      }
      break;
 8005a34:	e004      	b.n	8005a40 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005a36:	6839      	ldr	r1, [r7, #0]
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fd0b 	bl	8006454 <USBD_CtlError>
      break;
 8005a3e:	bf00      	nop
  }

  return ret;
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop

08005a4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a62:	2b40      	cmp	r3, #64	; 0x40
 8005a64:	d005      	beq.n	8005a72 <USBD_StdItfReq+0x26>
 8005a66:	2b40      	cmp	r3, #64	; 0x40
 8005a68:	d82f      	bhi.n	8005aca <USBD_StdItfReq+0x7e>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <USBD_StdItfReq+0x26>
 8005a6e:	2b20      	cmp	r3, #32
 8005a70:	d12b      	bne.n	8005aca <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d81d      	bhi.n	8005abc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	889b      	ldrh	r3, [r3, #4]
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d813      	bhi.n	8005ab2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	6839      	ldr	r1, [r7, #0]
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	4798      	blx	r3
 8005a98:	4603      	mov	r3, r0
 8005a9a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	88db      	ldrh	r3, [r3, #6]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d110      	bne.n	8005ac6 <USBD_StdItfReq+0x7a>
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10d      	bne.n	8005ac6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fd9d 	bl	80065ea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005ab0:	e009      	b.n	8005ac6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005ab2:	6839      	ldr	r1, [r7, #0]
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fccd 	bl	8006454 <USBD_CtlError>
          break;
 8005aba:	e004      	b.n	8005ac6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fcc8 	bl	8006454 <USBD_CtlError>
          break;
 8005ac4:	e000      	b.n	8005ac8 <USBD_StdItfReq+0x7c>
          break;
 8005ac6:	bf00      	nop
      }
      break;
 8005ac8:	e004      	b.n	8005ad4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fcc1 	bl	8006454 <USBD_CtlError>
      break;
 8005ad2:	bf00      	nop
  }

  return ret;
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	889b      	ldrh	r3, [r3, #4]
 8005af0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005afa:	2b40      	cmp	r3, #64	; 0x40
 8005afc:	d007      	beq.n	8005b0e <USBD_StdEPReq+0x30>
 8005afe:	2b40      	cmp	r3, #64	; 0x40
 8005b00:	f200 8145 	bhi.w	8005d8e <USBD_StdEPReq+0x2b0>
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00c      	beq.n	8005b22 <USBD_StdEPReq+0x44>
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	f040 8140 	bne.w	8005d8e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	4798      	blx	r3
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b20:	e13a      	b.n	8005d98 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	785b      	ldrb	r3, [r3, #1]
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	d007      	beq.n	8005b3a <USBD_StdEPReq+0x5c>
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	f300 8129 	bgt.w	8005d82 <USBD_StdEPReq+0x2a4>
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d07f      	beq.n	8005c34 <USBD_StdEPReq+0x156>
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d03c      	beq.n	8005bb2 <USBD_StdEPReq+0xd4>
 8005b38:	e123      	b.n	8005d82 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d002      	beq.n	8005b4c <USBD_StdEPReq+0x6e>
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d016      	beq.n	8005b78 <USBD_StdEPReq+0x9a>
 8005b4a:	e02c      	b.n	8005ba6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b4c:	7bbb      	ldrb	r3, [r7, #14]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00d      	beq.n	8005b6e <USBD_StdEPReq+0x90>
 8005b52:	7bbb      	ldrb	r3, [r7, #14]
 8005b54:	2b80      	cmp	r3, #128	; 0x80
 8005b56:	d00a      	beq.n	8005b6e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b58:	7bbb      	ldrb	r3, [r7, #14]
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f001 f9dd 	bl	8006f1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b62:	2180      	movs	r1, #128	; 0x80
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f001 f9d9 	bl	8006f1c <USBD_LL_StallEP>
 8005b6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b6c:	e020      	b.n	8005bb0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005b6e:	6839      	ldr	r1, [r7, #0]
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fc6f 	bl	8006454 <USBD_CtlError>
              break;
 8005b76:	e01b      	b.n	8005bb0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	885b      	ldrh	r3, [r3, #2]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10e      	bne.n	8005b9e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005b80:	7bbb      	ldrb	r3, [r7, #14]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00b      	beq.n	8005b9e <USBD_StdEPReq+0xc0>
 8005b86:	7bbb      	ldrb	r3, [r7, #14]
 8005b88:	2b80      	cmp	r3, #128	; 0x80
 8005b8a:	d008      	beq.n	8005b9e <USBD_StdEPReq+0xc0>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	88db      	ldrh	r3, [r3, #6]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d104      	bne.n	8005b9e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b94:	7bbb      	ldrb	r3, [r7, #14]
 8005b96:	4619      	mov	r1, r3
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f001 f9bf 	bl	8006f1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fd23 	bl	80065ea <USBD_CtlSendStatus>

              break;
 8005ba4:	e004      	b.n	8005bb0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005ba6:	6839      	ldr	r1, [r7, #0]
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fc53 	bl	8006454 <USBD_CtlError>
              break;
 8005bae:	bf00      	nop
          }
          break;
 8005bb0:	e0ec      	b.n	8005d8c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d002      	beq.n	8005bc4 <USBD_StdEPReq+0xe6>
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d016      	beq.n	8005bf0 <USBD_StdEPReq+0x112>
 8005bc2:	e030      	b.n	8005c26 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bc4:	7bbb      	ldrb	r3, [r7, #14]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00d      	beq.n	8005be6 <USBD_StdEPReq+0x108>
 8005bca:	7bbb      	ldrb	r3, [r7, #14]
 8005bcc:	2b80      	cmp	r3, #128	; 0x80
 8005bce:	d00a      	beq.n	8005be6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005bd0:	7bbb      	ldrb	r3, [r7, #14]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f001 f9a1 	bl	8006f1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bda:	2180      	movs	r1, #128	; 0x80
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f001 f99d 	bl	8006f1c <USBD_LL_StallEP>
 8005be2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005be4:	e025      	b.n	8005c32 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005be6:	6839      	ldr	r1, [r7, #0]
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fc33 	bl	8006454 <USBD_CtlError>
              break;
 8005bee:	e020      	b.n	8005c32 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	885b      	ldrh	r3, [r3, #2]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d11b      	bne.n	8005c30 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005bf8:	7bbb      	ldrb	r3, [r7, #14]
 8005bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d004      	beq.n	8005c0c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c02:	7bbb      	ldrb	r3, [r7, #14]
 8005c04:	4619      	mov	r1, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f001 f9be 	bl	8006f88 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fcec 	bl	80065ea <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	6839      	ldr	r1, [r7, #0]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	4798      	blx	r3
 8005c20:	4603      	mov	r3, r0
 8005c22:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005c24:	e004      	b.n	8005c30 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005c26:	6839      	ldr	r1, [r7, #0]
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 fc13 	bl	8006454 <USBD_CtlError>
              break;
 8005c2e:	e000      	b.n	8005c32 <USBD_StdEPReq+0x154>
              break;
 8005c30:	bf00      	nop
          }
          break;
 8005c32:	e0ab      	b.n	8005d8c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d002      	beq.n	8005c46 <USBD_StdEPReq+0x168>
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d032      	beq.n	8005caa <USBD_StdEPReq+0x1cc>
 8005c44:	e097      	b.n	8005d76 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c46:	7bbb      	ldrb	r3, [r7, #14]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d007      	beq.n	8005c5c <USBD_StdEPReq+0x17e>
 8005c4c:	7bbb      	ldrb	r3, [r7, #14]
 8005c4e:	2b80      	cmp	r3, #128	; 0x80
 8005c50:	d004      	beq.n	8005c5c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fbfd 	bl	8006454 <USBD_CtlError>
                break;
 8005c5a:	e091      	b.n	8005d80 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	da0b      	bge.n	8005c7c <USBD_StdEPReq+0x19e>
 8005c64:	7bbb      	ldrb	r3, [r7, #14]
 8005c66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	3310      	adds	r3, #16
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	4413      	add	r3, r2
 8005c78:	3304      	adds	r3, #4
 8005c7a:	e00b      	b.n	8005c94 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c7c:	7bbb      	ldrb	r3, [r7, #14]
 8005c7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c82:	4613      	mov	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	4413      	add	r3, r2
 8005c92:	3304      	adds	r3, #4
 8005c94:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fc47 	bl	8006536 <USBD_CtlSendData>
              break;
 8005ca8:	e06a      	b.n	8005d80 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005caa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	da11      	bge.n	8005cd6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005cb2:	7bbb      	ldrb	r3, [r7, #14]
 8005cb4:	f003 020f 	and.w	r2, r3, #15
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	3324      	adds	r3, #36	; 0x24
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d117      	bne.n	8005cfc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005ccc:	6839      	ldr	r1, [r7, #0]
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fbc0 	bl	8006454 <USBD_CtlError>
                  break;
 8005cd4:	e054      	b.n	8005d80 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005cd6:	7bbb      	ldrb	r3, [r7, #14]
 8005cd8:	f003 020f 	and.w	r2, r3, #15
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	440b      	add	r3, r1
 8005ce8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005cec:	881b      	ldrh	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d104      	bne.n	8005cfc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005cf2:	6839      	ldr	r1, [r7, #0]
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fbad 	bl	8006454 <USBD_CtlError>
                  break;
 8005cfa:	e041      	b.n	8005d80 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	da0b      	bge.n	8005d1c <USBD_StdEPReq+0x23e>
 8005d04:	7bbb      	ldrb	r3, [r7, #14]
 8005d06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	3310      	adds	r3, #16
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	4413      	add	r3, r2
 8005d18:	3304      	adds	r3, #4
 8005d1a:	e00b      	b.n	8005d34 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d1c:	7bbb      	ldrb	r3, [r7, #14]
 8005d1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d22:	4613      	mov	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	4413      	add	r3, r2
 8005d32:	3304      	adds	r3, #4
 8005d34:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005d36:	7bbb      	ldrb	r3, [r7, #14]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <USBD_StdEPReq+0x264>
 8005d3c:	7bbb      	ldrb	r3, [r7, #14]
 8005d3e:	2b80      	cmp	r3, #128	; 0x80
 8005d40:	d103      	bne.n	8005d4a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2200      	movs	r2, #0
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	e00e      	b.n	8005d68 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005d4a:	7bbb      	ldrb	r3, [r7, #14]
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f001 f950 	bl	8006ff4 <USBD_LL_IsStallEP>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	e002      	b.n	8005d68 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2200      	movs	r2, #0
 8005d66:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fbe1 	bl	8006536 <USBD_CtlSendData>
              break;
 8005d74:	e004      	b.n	8005d80 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005d76:	6839      	ldr	r1, [r7, #0]
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fb6b 	bl	8006454 <USBD_CtlError>
              break;
 8005d7e:	bf00      	nop
          }
          break;
 8005d80:	e004      	b.n	8005d8c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fb65 	bl	8006454 <USBD_CtlError>
          break;
 8005d8a:	bf00      	nop
      }
      break;
 8005d8c:	e004      	b.n	8005d98 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005d8e:	6839      	ldr	r1, [r7, #0]
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fb5f 	bl	8006454 <USBD_CtlError>
      break;
 8005d96:	bf00      	nop
  }

  return ret;
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	885b      	ldrh	r3, [r3, #2]
 8005dbe:	0a1b      	lsrs	r3, r3, #8
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	2b0e      	cmp	r3, #14
 8005dc6:	f200 8152 	bhi.w	800606e <USBD_GetDescriptor+0x2ca>
 8005dca:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <USBD_GetDescriptor+0x2c>)
 8005dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd0:	08005e41 	.word	0x08005e41
 8005dd4:	08005e59 	.word	0x08005e59
 8005dd8:	08005e99 	.word	0x08005e99
 8005ddc:	0800606f 	.word	0x0800606f
 8005de0:	0800606f 	.word	0x0800606f
 8005de4:	0800600f 	.word	0x0800600f
 8005de8:	0800603b 	.word	0x0800603b
 8005dec:	0800606f 	.word	0x0800606f
 8005df0:	0800606f 	.word	0x0800606f
 8005df4:	0800606f 	.word	0x0800606f
 8005df8:	0800606f 	.word	0x0800606f
 8005dfc:	0800606f 	.word	0x0800606f
 8005e00:	0800606f 	.word	0x0800606f
 8005e04:	0800606f 	.word	0x0800606f
 8005e08:	08005e0d 	.word	0x08005e0d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00b      	beq.n	8005e30 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	7c12      	ldrb	r2, [r2, #16]
 8005e24:	f107 0108 	add.w	r1, r7, #8
 8005e28:	4610      	mov	r0, r2
 8005e2a:	4798      	blx	r3
 8005e2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e2e:	e126      	b.n	800607e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005e30:	6839      	ldr	r1, [r7, #0]
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fb0e 	bl	8006454 <USBD_CtlError>
        err++;
 8005e38:	7afb      	ldrb	r3, [r7, #11]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	72fb      	strb	r3, [r7, #11]
      break;
 8005e3e:	e11e      	b.n	800607e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	7c12      	ldrb	r2, [r2, #16]
 8005e4c:	f107 0108 	add.w	r1, r7, #8
 8005e50:	4610      	mov	r0, r2
 8005e52:	4798      	blx	r3
 8005e54:	60f8      	str	r0, [r7, #12]
      break;
 8005e56:	e112      	b.n	800607e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	7c1b      	ldrb	r3, [r3, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10d      	bne.n	8005e7c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e68:	f107 0208 	add.w	r2, r7, #8
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	4798      	blx	r3
 8005e70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3301      	adds	r3, #1
 8005e76:	2202      	movs	r2, #2
 8005e78:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005e7a:	e100      	b.n	800607e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	f107 0208 	add.w	r2, r7, #8
 8005e88:	4610      	mov	r0, r2
 8005e8a:	4798      	blx	r3
 8005e8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	3301      	adds	r3, #1
 8005e92:	2202      	movs	r2, #2
 8005e94:	701a      	strb	r2, [r3, #0]
      break;
 8005e96:	e0f2      	b.n	800607e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	885b      	ldrh	r3, [r3, #2]
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b05      	cmp	r3, #5
 8005ea0:	f200 80ac 	bhi.w	8005ffc <USBD_GetDescriptor+0x258>
 8005ea4:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <USBD_GetDescriptor+0x108>)
 8005ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eaa:	bf00      	nop
 8005eac:	08005ec5 	.word	0x08005ec5
 8005eb0:	08005ef9 	.word	0x08005ef9
 8005eb4:	08005f2d 	.word	0x08005f2d
 8005eb8:	08005f61 	.word	0x08005f61
 8005ebc:	08005f95 	.word	0x08005f95
 8005ec0:	08005fc9 	.word	0x08005fc9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00b      	beq.n	8005ee8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	7c12      	ldrb	r2, [r2, #16]
 8005edc:	f107 0108 	add.w	r1, r7, #8
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	4798      	blx	r3
 8005ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ee6:	e091      	b.n	800600c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fab2 	bl	8006454 <USBD_CtlError>
            err++;
 8005ef0:	7afb      	ldrb	r3, [r7, #11]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8005ef6:	e089      	b.n	800600c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00b      	beq.n	8005f1c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	7c12      	ldrb	r2, [r2, #16]
 8005f10:	f107 0108 	add.w	r1, r7, #8
 8005f14:	4610      	mov	r0, r2
 8005f16:	4798      	blx	r3
 8005f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f1a:	e077      	b.n	800600c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fa98 	bl	8006454 <USBD_CtlError>
            err++;
 8005f24:	7afb      	ldrb	r3, [r7, #11]
 8005f26:	3301      	adds	r3, #1
 8005f28:	72fb      	strb	r3, [r7, #11]
          break;
 8005f2a:	e06f      	b.n	800600c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00b      	beq.n	8005f50 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	7c12      	ldrb	r2, [r2, #16]
 8005f44:	f107 0108 	add.w	r1, r7, #8
 8005f48:	4610      	mov	r0, r2
 8005f4a:	4798      	blx	r3
 8005f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f4e:	e05d      	b.n	800600c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005f50:	6839      	ldr	r1, [r7, #0]
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fa7e 	bl	8006454 <USBD_CtlError>
            err++;
 8005f58:	7afb      	ldrb	r3, [r7, #11]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8005f5e:	e055      	b.n	800600c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00b      	beq.n	8005f84 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	7c12      	ldrb	r2, [r2, #16]
 8005f78:	f107 0108 	add.w	r1, r7, #8
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	4798      	blx	r3
 8005f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f82:	e043      	b.n	800600c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005f84:	6839      	ldr	r1, [r7, #0]
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fa64 	bl	8006454 <USBD_CtlError>
            err++;
 8005f8c:	7afb      	ldrb	r3, [r7, #11]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	72fb      	strb	r3, [r7, #11]
          break;
 8005f92:	e03b      	b.n	800600c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00b      	beq.n	8005fb8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	7c12      	ldrb	r2, [r2, #16]
 8005fac:	f107 0108 	add.w	r1, r7, #8
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	4798      	blx	r3
 8005fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fb6:	e029      	b.n	800600c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005fb8:	6839      	ldr	r1, [r7, #0]
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fa4a 	bl	8006454 <USBD_CtlError>
            err++;
 8005fc0:	7afb      	ldrb	r3, [r7, #11]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8005fc6:	e021      	b.n	800600c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00b      	beq.n	8005fec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	7c12      	ldrb	r2, [r2, #16]
 8005fe0:	f107 0108 	add.w	r1, r7, #8
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	4798      	blx	r3
 8005fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fea:	e00f      	b.n	800600c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fa30 	bl	8006454 <USBD_CtlError>
            err++;
 8005ff4:	7afb      	ldrb	r3, [r7, #11]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8005ffa:	e007      	b.n	800600c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fa28 	bl	8006454 <USBD_CtlError>
          err++;
 8006004:	7afb      	ldrb	r3, [r7, #11]
 8006006:	3301      	adds	r3, #1
 8006008:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800600a:	bf00      	nop
      }
      break;
 800600c:	e037      	b.n	800607e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	7c1b      	ldrb	r3, [r3, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d109      	bne.n	800602a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800601c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601e:	f107 0208 	add.w	r2, r7, #8
 8006022:	4610      	mov	r0, r2
 8006024:	4798      	blx	r3
 8006026:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006028:	e029      	b.n	800607e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800602a:	6839      	ldr	r1, [r7, #0]
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fa11 	bl	8006454 <USBD_CtlError>
        err++;
 8006032:	7afb      	ldrb	r3, [r7, #11]
 8006034:	3301      	adds	r3, #1
 8006036:	72fb      	strb	r3, [r7, #11]
      break;
 8006038:	e021      	b.n	800607e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	7c1b      	ldrb	r3, [r3, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10d      	bne.n	800605e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604a:	f107 0208 	add.w	r2, r7, #8
 800604e:	4610      	mov	r0, r2
 8006050:	4798      	blx	r3
 8006052:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3301      	adds	r3, #1
 8006058:	2207      	movs	r2, #7
 800605a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800605c:	e00f      	b.n	800607e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800605e:	6839      	ldr	r1, [r7, #0]
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f9f7 	bl	8006454 <USBD_CtlError>
        err++;
 8006066:	7afb      	ldrb	r3, [r7, #11]
 8006068:	3301      	adds	r3, #1
 800606a:	72fb      	strb	r3, [r7, #11]
      break;
 800606c:	e007      	b.n	800607e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800606e:	6839      	ldr	r1, [r7, #0]
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f9ef 	bl	8006454 <USBD_CtlError>
      err++;
 8006076:	7afb      	ldrb	r3, [r7, #11]
 8006078:	3301      	adds	r3, #1
 800607a:	72fb      	strb	r3, [r7, #11]
      break;
 800607c:	bf00      	nop
  }

  if (err != 0U)
 800607e:	7afb      	ldrb	r3, [r7, #11]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d11e      	bne.n	80060c2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	88db      	ldrh	r3, [r3, #6]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d016      	beq.n	80060ba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800608c:	893b      	ldrh	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00e      	beq.n	80060b0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	88da      	ldrh	r2, [r3, #6]
 8006096:	893b      	ldrh	r3, [r7, #8]
 8006098:	4293      	cmp	r3, r2
 800609a:	bf28      	it	cs
 800609c:	4613      	movcs	r3, r2
 800609e:	b29b      	uxth	r3, r3
 80060a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80060a2:	893b      	ldrh	r3, [r7, #8]
 80060a4:	461a      	mov	r2, r3
 80060a6:	68f9      	ldr	r1, [r7, #12]
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fa44 	bl	8006536 <USBD_CtlSendData>
 80060ae:	e009      	b.n	80060c4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80060b0:	6839      	ldr	r1, [r7, #0]
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f9ce 	bl	8006454 <USBD_CtlError>
 80060b8:	e004      	b.n	80060c4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fa95 	bl	80065ea <USBD_CtlSendStatus>
 80060c0:	e000      	b.n	80060c4 <USBD_GetDescriptor+0x320>
    return;
 80060c2:	bf00      	nop
  }
}
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop

080060cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	889b      	ldrh	r3, [r3, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d131      	bne.n	8006142 <USBD_SetAddress+0x76>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	88db      	ldrh	r3, [r3, #6]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d12d      	bne.n	8006142 <USBD_SetAddress+0x76>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	885b      	ldrh	r3, [r3, #2]
 80060ea:	2b7f      	cmp	r3, #127	; 0x7f
 80060ec:	d829      	bhi.n	8006142 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	885b      	ldrh	r3, [r3, #2]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b03      	cmp	r3, #3
 8006104:	d104      	bne.n	8006110 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f9a3 	bl	8006454 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800610e:	e01d      	b.n	800614c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	7bfa      	ldrb	r2, [r7, #15]
 8006114:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006118:	7bfb      	ldrb	r3, [r7, #15]
 800611a:	4619      	mov	r1, r3
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 ff95 	bl	800704c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fa61 	bl	80065ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d004      	beq.n	8006138 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2202      	movs	r2, #2
 8006132:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006136:	e009      	b.n	800614c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006140:	e004      	b.n	800614c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f985 	bl	8006454 <USBD_CtlError>
  }
}
 800614a:	bf00      	nop
 800614c:	bf00      	nop
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	885b      	ldrh	r3, [r3, #2]
 8006166:	b2da      	uxtb	r2, r3
 8006168:	4b4c      	ldr	r3, [pc, #304]	; (800629c <USBD_SetConfig+0x148>)
 800616a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800616c:	4b4b      	ldr	r3, [pc, #300]	; (800629c <USBD_SetConfig+0x148>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d905      	bls.n	8006180 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006174:	6839      	ldr	r1, [r7, #0]
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f96c 	bl	8006454 <USBD_CtlError>
    return USBD_FAIL;
 800617c:	2303      	movs	r3, #3
 800617e:	e088      	b.n	8006292 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b02      	cmp	r3, #2
 800618a:	d002      	beq.n	8006192 <USBD_SetConfig+0x3e>
 800618c:	2b03      	cmp	r3, #3
 800618e:	d025      	beq.n	80061dc <USBD_SetConfig+0x88>
 8006190:	e071      	b.n	8006276 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006192:	4b42      	ldr	r3, [pc, #264]	; (800629c <USBD_SetConfig+0x148>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d01c      	beq.n	80061d4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800619a:	4b40      	ldr	r3, [pc, #256]	; (800629c <USBD_SetConfig+0x148>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80061a4:	4b3d      	ldr	r3, [pc, #244]	; (800629c <USBD_SetConfig+0x148>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	4619      	mov	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff f91e 	bl	80053ec <USBD_SetClassConfig>
 80061b0:	4603      	mov	r3, r0
 80061b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d004      	beq.n	80061c4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80061ba:	6839      	ldr	r1, [r7, #0]
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f949 	bl	8006454 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80061c2:	e065      	b.n	8006290 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fa10 	bl	80065ea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2203      	movs	r2, #3
 80061ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80061d2:	e05d      	b.n	8006290 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fa08 	bl	80065ea <USBD_CtlSendStatus>
      break;
 80061da:	e059      	b.n	8006290 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80061dc:	4b2f      	ldr	r3, [pc, #188]	; (800629c <USBD_SetConfig+0x148>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d112      	bne.n	800620a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80061ec:	4b2b      	ldr	r3, [pc, #172]	; (800629c <USBD_SetConfig+0x148>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80061f6:	4b29      	ldr	r3, [pc, #164]	; (800629c <USBD_SetConfig+0x148>)
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	4619      	mov	r1, r3
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7ff f911 	bl	8005424 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f9f1 	bl	80065ea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006208:	e042      	b.n	8006290 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800620a:	4b24      	ldr	r3, [pc, #144]	; (800629c <USBD_SetConfig+0x148>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	429a      	cmp	r2, r3
 8006216:	d02a      	beq.n	800626e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	b2db      	uxtb	r3, r3
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff f8ff 	bl	8005424 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006226:	4b1d      	ldr	r3, [pc, #116]	; (800629c <USBD_SetConfig+0x148>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006230:	4b1a      	ldr	r3, [pc, #104]	; (800629c <USBD_SetConfig+0x148>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	4619      	mov	r1, r3
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7ff f8d8 	bl	80053ec <USBD_SetClassConfig>
 800623c:	4603      	mov	r3, r0
 800623e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006240:	7bfb      	ldrb	r3, [r7, #15]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00f      	beq.n	8006266 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006246:	6839      	ldr	r1, [r7, #0]
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f903 	bl	8006454 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	b2db      	uxtb	r3, r3
 8006254:	4619      	mov	r1, r3
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7ff f8e4 	bl	8005424 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006264:	e014      	b.n	8006290 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f9bf 	bl	80065ea <USBD_CtlSendStatus>
      break;
 800626c:	e010      	b.n	8006290 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f9bb 	bl	80065ea <USBD_CtlSendStatus>
      break;
 8006274:	e00c      	b.n	8006290 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006276:	6839      	ldr	r1, [r7, #0]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f8eb 	bl	8006454 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800627e:	4b07      	ldr	r3, [pc, #28]	; (800629c <USBD_SetConfig+0x148>)
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7ff f8cd 	bl	8005424 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800628a:	2303      	movs	r3, #3
 800628c:	73fb      	strb	r3, [r7, #15]
      break;
 800628e:	bf00      	nop
  }

  return ret;
 8006290:	7bfb      	ldrb	r3, [r7, #15]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	200001ac 	.word	0x200001ac

080062a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	88db      	ldrh	r3, [r3, #6]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d004      	beq.n	80062bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f8cd 	bl	8006454 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80062ba:	e023      	b.n	8006304 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	dc02      	bgt.n	80062ce <USBD_GetConfig+0x2e>
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	dc03      	bgt.n	80062d4 <USBD_GetConfig+0x34>
 80062cc:	e015      	b.n	80062fa <USBD_GetConfig+0x5a>
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	d00b      	beq.n	80062ea <USBD_GetConfig+0x4a>
 80062d2:	e012      	b.n	80062fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3308      	adds	r3, #8
 80062de:	2201      	movs	r2, #1
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f927 	bl	8006536 <USBD_CtlSendData>
        break;
 80062e8:	e00c      	b.n	8006304 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3304      	adds	r3, #4
 80062ee:	2201      	movs	r2, #1
 80062f0:	4619      	mov	r1, r3
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f91f 	bl	8006536 <USBD_CtlSendData>
        break;
 80062f8:	e004      	b.n	8006304 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f8a9 	bl	8006454 <USBD_CtlError>
        break;
 8006302:	bf00      	nop
}
 8006304:	bf00      	nop
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631c:	b2db      	uxtb	r3, r3
 800631e:	3b01      	subs	r3, #1
 8006320:	2b02      	cmp	r3, #2
 8006322:	d81e      	bhi.n	8006362 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	88db      	ldrh	r3, [r3, #6]
 8006328:	2b02      	cmp	r3, #2
 800632a:	d004      	beq.n	8006336 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f890 	bl	8006454 <USBD_CtlError>
        break;
 8006334:	e01a      	b.n	800636c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	f043 0202 	orr.w	r2, r3, #2
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	330c      	adds	r3, #12
 8006356:	2202      	movs	r2, #2
 8006358:	4619      	mov	r1, r3
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f8eb 	bl	8006536 <USBD_CtlSendData>
      break;
 8006360:	e004      	b.n	800636c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006362:	6839      	ldr	r1, [r7, #0]
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f875 	bl	8006454 <USBD_CtlError>
      break;
 800636a:	bf00      	nop
  }
}
 800636c:	bf00      	nop
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	885b      	ldrh	r3, [r3, #2]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d106      	bne.n	8006394 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f92b 	bl	80065ea <USBD_CtlSendStatus>
  }
}
 8006394:	bf00      	nop
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d80b      	bhi.n	80063cc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	885b      	ldrh	r3, [r3, #2]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d10c      	bne.n	80063d6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f910 	bl	80065ea <USBD_CtlSendStatus>
      }
      break;
 80063ca:	e004      	b.n	80063d6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f840 	bl	8006454 <USBD_CtlError>
      break;
 80063d4:	e000      	b.n	80063d8 <USBD_ClrFeature+0x3c>
      break;
 80063d6:	bf00      	nop
  }
}
 80063d8:	bf00      	nop
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	781a      	ldrb	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3301      	adds	r3, #1
 80063fa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	781a      	ldrb	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3301      	adds	r3, #1
 8006408:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f7ff fa91 	bl	8005932 <SWAPBYTE>
 8006410:	4603      	mov	r3, r0
 8006412:	461a      	mov	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3301      	adds	r3, #1
 800641c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	3301      	adds	r3, #1
 8006422:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f7ff fa84 	bl	8005932 <SWAPBYTE>
 800642a:	4603      	mov	r3, r0
 800642c:	461a      	mov	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	3301      	adds	r3, #1
 8006436:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3301      	adds	r3, #1
 800643c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f7ff fa77 	bl	8005932 <SWAPBYTE>
 8006444:	4603      	mov	r3, r0
 8006446:	461a      	mov	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	80da      	strh	r2, [r3, #6]
}
 800644c:	bf00      	nop
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800645e:	2180      	movs	r1, #128	; 0x80
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fd5b 	bl	8006f1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006466:	2100      	movs	r1, #0
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fd57 	bl	8006f1c <USBD_LL_StallEP>
}
 800646e:	bf00      	nop
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b086      	sub	sp, #24
 800647a:	af00      	add	r7, sp, #0
 800647c:	60f8      	str	r0, [r7, #12]
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d036      	beq.n	80064fa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006490:	6938      	ldr	r0, [r7, #16]
 8006492:	f000 f836 	bl	8006502 <USBD_GetLen>
 8006496:	4603      	mov	r3, r0
 8006498:	3301      	adds	r3, #1
 800649a:	b29b      	uxth	r3, r3
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80064a4:	7dfb      	ldrb	r3, [r7, #23]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	4413      	add	r3, r2
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	7812      	ldrb	r2, [r2, #0]
 80064ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80064b0:	7dfb      	ldrb	r3, [r7, #23]
 80064b2:	3301      	adds	r3, #1
 80064b4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80064b6:	7dfb      	ldrb	r3, [r7, #23]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	4413      	add	r3, r2
 80064bc:	2203      	movs	r2, #3
 80064be:	701a      	strb	r2, [r3, #0]
  idx++;
 80064c0:	7dfb      	ldrb	r3, [r7, #23]
 80064c2:	3301      	adds	r3, #1
 80064c4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80064c6:	e013      	b.n	80064f0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	4413      	add	r3, r2
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	7812      	ldrb	r2, [r2, #0]
 80064d2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	3301      	adds	r3, #1
 80064d8:	613b      	str	r3, [r7, #16]
    idx++;
 80064da:	7dfb      	ldrb	r3, [r7, #23]
 80064dc:	3301      	adds	r3, #1
 80064de:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80064e0:	7dfb      	ldrb	r3, [r7, #23]
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	4413      	add	r3, r2
 80064e6:	2200      	movs	r2, #0
 80064e8:	701a      	strb	r2, [r3, #0]
    idx++;
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
 80064ec:	3301      	adds	r3, #1
 80064ee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e7      	bne.n	80064c8 <USBD_GetString+0x52>
 80064f8:	e000      	b.n	80064fc <USBD_GetString+0x86>
    return;
 80064fa:	bf00      	nop
  }
}
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006502:	b480      	push	{r7}
 8006504:	b085      	sub	sp, #20
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006512:	e005      	b.n	8006520 <USBD_GetLen+0x1e>
  {
    len++;
 8006514:	7bfb      	ldrb	r3, [r7, #15]
 8006516:	3301      	adds	r3, #1
 8006518:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	3301      	adds	r3, #1
 800651e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1f5      	bne.n	8006514 <USBD_GetLen+0x12>
  }

  return len;
 8006528:	7bfb      	ldrb	r3, [r7, #15]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2202      	movs	r2, #2
 8006546:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	2100      	movs	r1, #0
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 fdab 	bl	80070b8 <USBD_LL_Transmit>

  return USBD_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	2100      	movs	r1, #0
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 fd9a 	bl	80070b8 <USBD_LL_Transmit>

  return USBD_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2203      	movs	r2, #3
 800659e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	2100      	movs	r1, #0
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 fdb5 	bl	8007128 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	2100      	movs	r1, #0
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 fda4 	bl	8007128 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b082      	sub	sp, #8
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2204      	movs	r2, #4
 80065f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80065fa:	2300      	movs	r3, #0
 80065fc:	2200      	movs	r2, #0
 80065fe:	2100      	movs	r1, #0
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fd59 	bl	80070b8 <USBD_LL_Transmit>

  return USBD_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2205      	movs	r2, #5
 800661c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006620:	2300      	movs	r3, #0
 8006622:	2200      	movs	r2, #0
 8006624:	2100      	movs	r1, #0
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fd7e 	bl	8007128 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800663c:	2200      	movs	r2, #0
 800663e:	4912      	ldr	r1, [pc, #72]	; (8006688 <MX_USB_DEVICE_Init+0x50>)
 8006640:	4812      	ldr	r0, [pc, #72]	; (800668c <MX_USB_DEVICE_Init+0x54>)
 8006642:	f7fe fe65 	bl	8005310 <USBD_Init>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800664c:	f7f9 fef4 	bl	8000438 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006650:	490f      	ldr	r1, [pc, #60]	; (8006690 <MX_USB_DEVICE_Init+0x58>)
 8006652:	480e      	ldr	r0, [pc, #56]	; (800668c <MX_USB_DEVICE_Init+0x54>)
 8006654:	f7fe fe8c 	bl	8005370 <USBD_RegisterClass>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800665e:	f7f9 feeb 	bl	8000438 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006662:	490c      	ldr	r1, [pc, #48]	; (8006694 <MX_USB_DEVICE_Init+0x5c>)
 8006664:	4809      	ldr	r0, [pc, #36]	; (800668c <MX_USB_DEVICE_Init+0x54>)
 8006666:	f7fe fdad 	bl	80051c4 <USBD_CDC_RegisterInterface>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006670:	f7f9 fee2 	bl	8000438 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006674:	4805      	ldr	r0, [pc, #20]	; (800668c <MX_USB_DEVICE_Init+0x54>)
 8006676:	f7fe fea2 	bl	80053be <USBD_Start>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006680:	f7f9 feda 	bl	8000438 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006684:	bf00      	nop
 8006686:	bd80      	pop	{r7, pc}
 8006688:	20000130 	.word	0x20000130
 800668c:	20000460 	.word	0x20000460
 8006690:	20000018 	.word	0x20000018
 8006694:	2000011c 	.word	0x2000011c

08006698 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800669c:	2200      	movs	r2, #0
 800669e:	4905      	ldr	r1, [pc, #20]	; (80066b4 <CDC_Init_FS+0x1c>)
 80066a0:	4805      	ldr	r0, [pc, #20]	; (80066b8 <CDC_Init_FS+0x20>)
 80066a2:	f7fe fda4 	bl	80051ee <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80066a6:	4905      	ldr	r1, [pc, #20]	; (80066bc <CDC_Init_FS+0x24>)
 80066a8:	4803      	ldr	r0, [pc, #12]	; (80066b8 <CDC_Init_FS+0x20>)
 80066aa:	f7fe fdbe 	bl	800522a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80066ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	20000f30 	.word	0x20000f30
 80066b8:	20000460 	.word	0x20000460
 80066bc:	20000730 	.word	0x20000730

080066c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80066c0:	b480      	push	{r7}
 80066c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80066c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	4603      	mov	r3, r0
 80066d8:	6039      	str	r1, [r7, #0]
 80066da:	71fb      	strb	r3, [r7, #7]
 80066dc:	4613      	mov	r3, r2
 80066de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80066e0:	79fb      	ldrb	r3, [r7, #7]
 80066e2:	2b23      	cmp	r3, #35	; 0x23
 80066e4:	d84a      	bhi.n	800677c <CDC_Control_FS+0xac>
 80066e6:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <CDC_Control_FS+0x1c>)
 80066e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ec:	0800677d 	.word	0x0800677d
 80066f0:	0800677d 	.word	0x0800677d
 80066f4:	0800677d 	.word	0x0800677d
 80066f8:	0800677d 	.word	0x0800677d
 80066fc:	0800677d 	.word	0x0800677d
 8006700:	0800677d 	.word	0x0800677d
 8006704:	0800677d 	.word	0x0800677d
 8006708:	0800677d 	.word	0x0800677d
 800670c:	0800677d 	.word	0x0800677d
 8006710:	0800677d 	.word	0x0800677d
 8006714:	0800677d 	.word	0x0800677d
 8006718:	0800677d 	.word	0x0800677d
 800671c:	0800677d 	.word	0x0800677d
 8006720:	0800677d 	.word	0x0800677d
 8006724:	0800677d 	.word	0x0800677d
 8006728:	0800677d 	.word	0x0800677d
 800672c:	0800677d 	.word	0x0800677d
 8006730:	0800677d 	.word	0x0800677d
 8006734:	0800677d 	.word	0x0800677d
 8006738:	0800677d 	.word	0x0800677d
 800673c:	0800677d 	.word	0x0800677d
 8006740:	0800677d 	.word	0x0800677d
 8006744:	0800677d 	.word	0x0800677d
 8006748:	0800677d 	.word	0x0800677d
 800674c:	0800677d 	.word	0x0800677d
 8006750:	0800677d 	.word	0x0800677d
 8006754:	0800677d 	.word	0x0800677d
 8006758:	0800677d 	.word	0x0800677d
 800675c:	0800677d 	.word	0x0800677d
 8006760:	0800677d 	.word	0x0800677d
 8006764:	0800677d 	.word	0x0800677d
 8006768:	0800677d 	.word	0x0800677d
 800676c:	0800677d 	.word	0x0800677d
 8006770:	0800677d 	.word	0x0800677d
 8006774:	0800677d 	.word	0x0800677d
 8006778:	0800677d 	.word	0x0800677d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800677c:	bf00      	nop
  }

  return (USBD_OK);
 800677e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006780:	4618      	mov	r0, r3
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006796:	6879      	ldr	r1, [r7, #4]
 8006798:	4805      	ldr	r0, [pc, #20]	; (80067b0 <CDC_Receive_FS+0x24>)
 800679a:	f7fe fd46 	bl	800522a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800679e:	4804      	ldr	r0, [pc, #16]	; (80067b0 <CDC_Receive_FS+0x24>)
 80067a0:	f7fe fd8c 	bl	80052bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80067a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	20000460 	.word	0x20000460

080067b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80067c0:	2300      	movs	r3, #0
 80067c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80067c4:	4b0d      	ldr	r3, [pc, #52]	; (80067fc <CDC_Transmit_FS+0x48>)
 80067c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e00b      	b.n	80067f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80067da:	887b      	ldrh	r3, [r7, #2]
 80067dc:	461a      	mov	r2, r3
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	4806      	ldr	r0, [pc, #24]	; (80067fc <CDC_Transmit_FS+0x48>)
 80067e2:	f7fe fd04 	bl	80051ee <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80067e6:	4805      	ldr	r0, [pc, #20]	; (80067fc <CDC_Transmit_FS+0x48>)
 80067e8:	f7fe fd38 	bl	800525c <USBD_CDC_TransmitPacket>
 80067ec:	4603      	mov	r3, r0
 80067ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20000460 	.word	0x20000460

08006800 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	4613      	mov	r3, r2
 800680c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006812:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006816:	4618      	mov	r0, r3
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
	...

08006824 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	4603      	mov	r3, r0
 800682c:	6039      	str	r1, [r7, #0]
 800682e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	2212      	movs	r2, #18
 8006834:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006836:	4b03      	ldr	r3, [pc, #12]	; (8006844 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006838:	4618      	mov	r0, r3
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	20000150 	.word	0x20000150

08006848 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	4603      	mov	r3, r0
 8006850:	6039      	str	r1, [r7, #0]
 8006852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2204      	movs	r2, #4
 8006858:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800685a:	4b03      	ldr	r3, [pc, #12]	; (8006868 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800685c:	4618      	mov	r0, r3
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	20000170 	.word	0x20000170

0800686c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	4603      	mov	r3, r0
 8006874:	6039      	str	r1, [r7, #0]
 8006876:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d105      	bne.n	800688a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	4907      	ldr	r1, [pc, #28]	; (80068a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006882:	4808      	ldr	r0, [pc, #32]	; (80068a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006884:	f7ff fdf7 	bl	8006476 <USBD_GetString>
 8006888:	e004      	b.n	8006894 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	4904      	ldr	r1, [pc, #16]	; (80068a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800688e:	4805      	ldr	r0, [pc, #20]	; (80068a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006890:	f7ff fdf1 	bl	8006476 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006894:	4b02      	ldr	r3, [pc, #8]	; (80068a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006896:	4618      	mov	r0, r3
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	20001730 	.word	0x20001730
 80068a4:	08007308 	.word	0x08007308

080068a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	4603      	mov	r3, r0
 80068b0:	6039      	str	r1, [r7, #0]
 80068b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	4904      	ldr	r1, [pc, #16]	; (80068c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80068b8:	4804      	ldr	r0, [pc, #16]	; (80068cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80068ba:	f7ff fddc 	bl	8006476 <USBD_GetString>
  return USBD_StrDesc;
 80068be:	4b02      	ldr	r3, [pc, #8]	; (80068c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	20001730 	.word	0x20001730
 80068cc:	08007320 	.word	0x08007320

080068d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	4603      	mov	r3, r0
 80068d8:	6039      	str	r1, [r7, #0]
 80068da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	221a      	movs	r2, #26
 80068e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80068e2:	f000 f855 	bl	8006990 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80068e6:	4b02      	ldr	r3, [pc, #8]	; (80068f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	20000174 	.word	0x20000174

080068f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	4603      	mov	r3, r0
 80068fc:	6039      	str	r1, [r7, #0]
 80068fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006900:	79fb      	ldrb	r3, [r7, #7]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d105      	bne.n	8006912 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	4907      	ldr	r1, [pc, #28]	; (8006928 <USBD_FS_ConfigStrDescriptor+0x34>)
 800690a:	4808      	ldr	r0, [pc, #32]	; (800692c <USBD_FS_ConfigStrDescriptor+0x38>)
 800690c:	f7ff fdb3 	bl	8006476 <USBD_GetString>
 8006910:	e004      	b.n	800691c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	4904      	ldr	r1, [pc, #16]	; (8006928 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006916:	4805      	ldr	r0, [pc, #20]	; (800692c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006918:	f7ff fdad 	bl	8006476 <USBD_GetString>
  }
  return USBD_StrDesc;
 800691c:	4b02      	ldr	r3, [pc, #8]	; (8006928 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800691e:	4618      	mov	r0, r3
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20001730 	.word	0x20001730
 800692c:	08007334 	.word	0x08007334

08006930 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	6039      	str	r1, [r7, #0]
 800693a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d105      	bne.n	800694e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	4907      	ldr	r1, [pc, #28]	; (8006964 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006946:	4808      	ldr	r0, [pc, #32]	; (8006968 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006948:	f7ff fd95 	bl	8006476 <USBD_GetString>
 800694c:	e004      	b.n	8006958 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	4904      	ldr	r1, [pc, #16]	; (8006964 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006952:	4805      	ldr	r0, [pc, #20]	; (8006968 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006954:	f7ff fd8f 	bl	8006476 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006958:	4b02      	ldr	r3, [pc, #8]	; (8006964 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20001730 	.word	0x20001730
 8006968:	08007340 	.word	0x08007340

0800696c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	4603      	mov	r3, r0
 8006974:	6039      	str	r1, [r7, #0]
 8006976:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	220c      	movs	r2, #12
 800697c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800697e:	4b03      	ldr	r3, [pc, #12]	; (800698c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006980:	4618      	mov	r0, r3
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	20000164 	.word	0x20000164

08006990 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006996:	4b0f      	ldr	r3, [pc, #60]	; (80069d4 <Get_SerialNum+0x44>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800699c:	4b0e      	ldr	r3, [pc, #56]	; (80069d8 <Get_SerialNum+0x48>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80069a2:	4b0e      	ldr	r3, [pc, #56]	; (80069dc <Get_SerialNum+0x4c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4413      	add	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d009      	beq.n	80069ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80069b6:	2208      	movs	r2, #8
 80069b8:	4909      	ldr	r1, [pc, #36]	; (80069e0 <Get_SerialNum+0x50>)
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 f814 	bl	80069e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80069c0:	2204      	movs	r2, #4
 80069c2:	4908      	ldr	r1, [pc, #32]	; (80069e4 <Get_SerialNum+0x54>)
 80069c4:	68b8      	ldr	r0, [r7, #8]
 80069c6:	f000 f80f 	bl	80069e8 <IntToUnicode>
  }
}
 80069ca:	bf00      	nop
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	1fff7590 	.word	0x1fff7590
 80069d8:	1fff7594 	.word	0x1fff7594
 80069dc:	1fff7598 	.word	0x1fff7598
 80069e0:	20000176 	.word	0x20000176
 80069e4:	20000186 	.word	0x20000186

080069e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	4613      	mov	r3, r2
 80069f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80069f6:	2300      	movs	r3, #0
 80069f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80069fa:	2300      	movs	r3, #0
 80069fc:	75fb      	strb	r3, [r7, #23]
 80069fe:	e027      	b.n	8006a50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	0f1b      	lsrs	r3, r3, #28
 8006a04:	2b09      	cmp	r3, #9
 8006a06:	d80b      	bhi.n	8006a20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	0f1b      	lsrs	r3, r3, #28
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	7dfb      	ldrb	r3, [r7, #23]
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	4619      	mov	r1, r3
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	440b      	add	r3, r1
 8006a18:	3230      	adds	r2, #48	; 0x30
 8006a1a:	b2d2      	uxtb	r2, r2
 8006a1c:	701a      	strb	r2, [r3, #0]
 8006a1e:	e00a      	b.n	8006a36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	0f1b      	lsrs	r3, r3, #28
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	440b      	add	r3, r1
 8006a30:	3237      	adds	r2, #55	; 0x37
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006a3c:	7dfb      	ldrb	r3, [r7, #23]
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	3301      	adds	r3, #1
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	4413      	add	r3, r2
 8006a46:	2200      	movs	r2, #0
 8006a48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006a4a:	7dfb      	ldrb	r3, [r7, #23]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	75fb      	strb	r3, [r7, #23]
 8006a50:	7dfa      	ldrb	r2, [r7, #23]
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d3d3      	bcc.n	8006a00 <IntToUnicode+0x18>
  }
}
 8006a58:	bf00      	nop
 8006a5a:	bf00      	nop
 8006a5c:	371c      	adds	r7, #28
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
	...

08006a68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08a      	sub	sp, #40	; 0x28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a70:	f107 0314 	add.w	r3, r7, #20
 8006a74:	2200      	movs	r2, #0
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	605a      	str	r2, [r3, #4]
 8006a7a:	609a      	str	r2, [r3, #8]
 8006a7c:	60da      	str	r2, [r3, #12]
 8006a7e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a88:	d14e      	bne.n	8006b28 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a8a:	4b29      	ldr	r3, [pc, #164]	; (8006b30 <HAL_PCD_MspInit+0xc8>)
 8006a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a8e:	4a28      	ldr	r2, [pc, #160]	; (8006b30 <HAL_PCD_MspInit+0xc8>)
 8006a90:	f043 0301 	orr.w	r3, r3, #1
 8006a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a96:	4b26      	ldr	r3, [pc, #152]	; (8006b30 <HAL_PCD_MspInit+0xc8>)
 8006a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	613b      	str	r3, [r7, #16]
 8006aa0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006aa2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aac:	2300      	movs	r3, #0
 8006aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006ab4:	230a      	movs	r3, #10
 8006ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ab8:	f107 0314 	add.w	r3, r7, #20
 8006abc:	4619      	mov	r1, r3
 8006abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ac2:	f7f9 ff05 	bl	80008d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006ac6:	4b1a      	ldr	r3, [pc, #104]	; (8006b30 <HAL_PCD_MspInit+0xc8>)
 8006ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aca:	4a19      	ldr	r2, [pc, #100]	; (8006b30 <HAL_PCD_MspInit+0xc8>)
 8006acc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ad2:	4b17      	ldr	r3, [pc, #92]	; (8006b30 <HAL_PCD_MspInit+0xc8>)
 8006ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ade:	4b14      	ldr	r3, [pc, #80]	; (8006b30 <HAL_PCD_MspInit+0xc8>)
 8006ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d114      	bne.n	8006b14 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aea:	4b11      	ldr	r3, [pc, #68]	; (8006b30 <HAL_PCD_MspInit+0xc8>)
 8006aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aee:	4a10      	ldr	r2, [pc, #64]	; (8006b30 <HAL_PCD_MspInit+0xc8>)
 8006af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006af4:	6593      	str	r3, [r2, #88]	; 0x58
 8006af6:	4b0e      	ldr	r3, [pc, #56]	; (8006b30 <HAL_PCD_MspInit+0xc8>)
 8006af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006afe:	60bb      	str	r3, [r7, #8]
 8006b00:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8006b02:	f7fb faf5 	bl	80020f0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b06:	4b0a      	ldr	r3, [pc, #40]	; (8006b30 <HAL_PCD_MspInit+0xc8>)
 8006b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0a:	4a09      	ldr	r2, [pc, #36]	; (8006b30 <HAL_PCD_MspInit+0xc8>)
 8006b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b10:	6593      	str	r3, [r2, #88]	; 0x58
 8006b12:	e001      	b.n	8006b18 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8006b14:	f7fb faec 	bl	80020f0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006b18:	2200      	movs	r2, #0
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	2043      	movs	r0, #67	; 0x43
 8006b1e:	f7f9 fea0 	bl	8000862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006b22:	2043      	movs	r0, #67	; 0x43
 8006b24:	f7f9 feb9 	bl	800089a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006b28:	bf00      	nop
 8006b2a:	3728      	adds	r7, #40	; 0x28
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	40021000 	.word	0x40021000

08006b34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	f7fe fc82 	bl	8005454 <USBD_LL_SetupStage>
}
 8006b50:	bf00      	nop
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	460b      	mov	r3, r1
 8006b62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006b6a:	78fa      	ldrb	r2, [r7, #3]
 8006b6c:	6879      	ldr	r1, [r7, #4]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	00db      	lsls	r3, r3, #3
 8006b72:	4413      	add	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	440b      	add	r3, r1
 8006b78:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	78fb      	ldrb	r3, [r7, #3]
 8006b80:	4619      	mov	r1, r3
 8006b82:	f7fe fcbc 	bl	80054fe <USBD_LL_DataOutStage>
}
 8006b86:	bf00      	nop
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	460b      	mov	r3, r1
 8006b98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006ba0:	78fa      	ldrb	r2, [r7, #3]
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	334c      	adds	r3, #76	; 0x4c
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	78fb      	ldrb	r3, [r7, #3]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	f7fe fd05 	bl	80055c4 <USBD_LL_DataInStage>
}
 8006bba:	bf00      	nop
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b082      	sub	sp, #8
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fe fe19 	bl	8005808 <USBD_LL_SOF>
}
 8006bd6:	bf00      	nop
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006be6:	2301      	movs	r3, #1
 8006be8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d001      	beq.n	8006bf6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006bf2:	f7f9 fc21 	bl	8000438 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006bfc:	7bfa      	ldrb	r2, [r7, #15]
 8006bfe:	4611      	mov	r1, r2
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fe fdc3 	bl	800578c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fe fd6f 	bl	80056f0 <USBD_LL_Reset>
}
 8006c12:	bf00      	nop
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	6812      	ldr	r2, [r2, #0]
 8006c32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c36:	f043 0301 	orr.w	r3, r3, #1
 8006c3a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fe fdb2 	bl	80057ac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d005      	beq.n	8006c5c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c50:	4b04      	ldr	r3, [pc, #16]	; (8006c64 <HAL_PCD_SuspendCallback+0x48>)
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	4a03      	ldr	r2, [pc, #12]	; (8006c64 <HAL_PCD_SuspendCallback+0x48>)
 8006c56:	f043 0306 	orr.w	r3, r3, #6
 8006c5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006c5c:	bf00      	nop
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	e000ed00 	.word	0xe000ed00

08006c68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	6812      	ldr	r2, [r2, #0]
 8006c7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c82:	f023 0301 	bic.w	r3, r3, #1
 8006c86:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d007      	beq.n	8006ca0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c90:	4b08      	ldr	r3, [pc, #32]	; (8006cb4 <HAL_PCD_ResumeCallback+0x4c>)
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	4a07      	ldr	r2, [pc, #28]	; (8006cb4 <HAL_PCD_ResumeCallback+0x4c>)
 8006c96:	f023 0306 	bic.w	r3, r3, #6
 8006c9a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006c9c:	f000 faf6 	bl	800728c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fe fd96 	bl	80057d8 <USBD_LL_Resume>
}
 8006cac:	bf00      	nop
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	e000ed00 	.word	0xe000ed00

08006cb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cca:	78fa      	ldrb	r2, [r7, #3]
 8006ccc:	4611      	mov	r1, r2
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fe fde2 	bl	8005898 <USBD_LL_IsoOUTIncomplete>
}
 8006cd4:	bf00      	nop
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cee:	78fa      	ldrb	r2, [r7, #3]
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fe fdaa 	bl	800584c <USBD_LL_IsoINIncomplete>
}
 8006cf8:	bf00      	nop
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fe fde8 	bl	80058e4 <USBD_LL_DevConnected>
}
 8006d14:	bf00      	nop
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fe fde5 	bl	80058fa <USBD_LL_DevDisconnected>
}
 8006d30:	bf00      	nop
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d13c      	bne.n	8006dc2 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006d48:	4a20      	ldr	r2, [pc, #128]	; (8006dcc <USBD_LL_Init+0x94>)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a1e      	ldr	r2, [pc, #120]	; (8006dcc <USBD_LL_Init+0x94>)
 8006d54:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006d58:	4b1c      	ldr	r3, [pc, #112]	; (8006dcc <USBD_LL_Init+0x94>)
 8006d5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006d5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006d60:	4b1a      	ldr	r3, [pc, #104]	; (8006dcc <USBD_LL_Init+0x94>)
 8006d62:	2206      	movs	r2, #6
 8006d64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006d66:	4b19      	ldr	r3, [pc, #100]	; (8006dcc <USBD_LL_Init+0x94>)
 8006d68:	2202      	movs	r2, #2
 8006d6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006d6c:	4b17      	ldr	r3, [pc, #92]	; (8006dcc <USBD_LL_Init+0x94>)
 8006d6e:	2202      	movs	r2, #2
 8006d70:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006d72:	4b16      	ldr	r3, [pc, #88]	; (8006dcc <USBD_LL_Init+0x94>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006d78:	4b14      	ldr	r3, [pc, #80]	; (8006dcc <USBD_LL_Init+0x94>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006d7e:	4b13      	ldr	r3, [pc, #76]	; (8006dcc <USBD_LL_Init+0x94>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8006d84:	4b11      	ldr	r3, [pc, #68]	; (8006dcc <USBD_LL_Init+0x94>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006d8a:	4b10      	ldr	r3, [pc, #64]	; (8006dcc <USBD_LL_Init+0x94>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006d90:	4b0e      	ldr	r3, [pc, #56]	; (8006dcc <USBD_LL_Init+0x94>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006d96:	480d      	ldr	r0, [pc, #52]	; (8006dcc <USBD_LL_Init+0x94>)
 8006d98:	f7f9 ff76 	bl	8000c88 <HAL_PCD_Init>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006da2:	f7f9 fb49 	bl	8000438 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006da6:	2180      	movs	r1, #128	; 0x80
 8006da8:	4808      	ldr	r0, [pc, #32]	; (8006dcc <USBD_LL_Init+0x94>)
 8006daa:	f7fb f8f8 	bl	8001f9e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006dae:	2240      	movs	r2, #64	; 0x40
 8006db0:	2100      	movs	r1, #0
 8006db2:	4806      	ldr	r0, [pc, #24]	; (8006dcc <USBD_LL_Init+0x94>)
 8006db4:	f7fb f8ac 	bl	8001f10 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006db8:	2280      	movs	r2, #128	; 0x80
 8006dba:	2101      	movs	r1, #1
 8006dbc:	4803      	ldr	r0, [pc, #12]	; (8006dcc <USBD_LL_Init+0x94>)
 8006dbe:	f7fb f8a7 	bl	8001f10 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	20001930 	.word	0x20001930

08006dd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fa f872 	bl	8000ed0 <HAL_PCD_Start>
 8006dec:	4603      	mov	r3, r0
 8006dee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	d816      	bhi.n	8006e24 <USBD_LL_Start+0x54>
 8006df6:	a201      	add	r2, pc, #4	; (adr r2, 8006dfc <USBD_LL_Start+0x2c>)
 8006df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfc:	08006e0d 	.word	0x08006e0d
 8006e00:	08006e13 	.word	0x08006e13
 8006e04:	08006e19 	.word	0x08006e19
 8006e08:	08006e1f 	.word	0x08006e1f
    case HAL_OK :
      usb_status = USBD_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e10:	e00b      	b.n	8006e2a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e12:	2303      	movs	r3, #3
 8006e14:	73fb      	strb	r3, [r7, #15]
    break;
 8006e16:	e008      	b.n	8006e2a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e1c:	e005      	b.n	8006e2a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	73fb      	strb	r3, [r7, #15]
    break;
 8006e22:	e002      	b.n	8006e2a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8006e24:	2303      	movs	r3, #3
 8006e26:	73fb      	strb	r3, [r7, #15]
    break;
 8006e28:	bf00      	nop
  }
  return usb_status;
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	4608      	mov	r0, r1
 8006e3e:	4611      	mov	r1, r2
 8006e40:	461a      	mov	r2, r3
 8006e42:	4603      	mov	r3, r0
 8006e44:	70fb      	strb	r3, [r7, #3]
 8006e46:	460b      	mov	r3, r1
 8006e48:	70bb      	strb	r3, [r7, #2]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006e5c:	78bb      	ldrb	r3, [r7, #2]
 8006e5e:	883a      	ldrh	r2, [r7, #0]
 8006e60:	78f9      	ldrb	r1, [r7, #3]
 8006e62:	f7fa fd1c 	bl	800189e <HAL_PCD_EP_Open>
 8006e66:	4603      	mov	r3, r0
 8006e68:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006e6a:	7bbb      	ldrb	r3, [r7, #14]
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	d817      	bhi.n	8006ea0 <USBD_LL_OpenEP+0x6c>
 8006e70:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <USBD_LL_OpenEP+0x44>)
 8006e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e76:	bf00      	nop
 8006e78:	08006e89 	.word	0x08006e89
 8006e7c:	08006e8f 	.word	0x08006e8f
 8006e80:	08006e95 	.word	0x08006e95
 8006e84:	08006e9b 	.word	0x08006e9b
    case HAL_OK :
      usb_status = USBD_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e8c:	e00b      	b.n	8006ea6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	73fb      	strb	r3, [r7, #15]
    break;
 8006e92:	e008      	b.n	8006ea6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e94:	2301      	movs	r3, #1
 8006e96:	73fb      	strb	r3, [r7, #15]
    break;
 8006e98:	e005      	b.n	8006ea6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	73fb      	strb	r3, [r7, #15]
    break;
 8006e9e:	e002      	b.n	8006ea6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ea4:	bf00      	nop
  }
  return usb_status;
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006eca:	78fa      	ldrb	r2, [r7, #3]
 8006ecc:	4611      	mov	r1, r2
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fa fd4d 	bl	800196e <HAL_PCD_EP_Close>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d816      	bhi.n	8006f0c <USBD_LL_CloseEP+0x5c>
 8006ede:	a201      	add	r2, pc, #4	; (adr r2, 8006ee4 <USBD_LL_CloseEP+0x34>)
 8006ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee4:	08006ef5 	.word	0x08006ef5
 8006ee8:	08006efb 	.word	0x08006efb
 8006eec:	08006f01 	.word	0x08006f01
 8006ef0:	08006f07 	.word	0x08006f07
    case HAL_OK :
      usb_status = USBD_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ef8:	e00b      	b.n	8006f12 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006efa:	2303      	movs	r3, #3
 8006efc:	73fb      	strb	r3, [r7, #15]
    break;
 8006efe:	e008      	b.n	8006f12 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f00:	2301      	movs	r3, #1
 8006f02:	73fb      	strb	r3, [r7, #15]
    break;
 8006f04:	e005      	b.n	8006f12 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f06:	2303      	movs	r3, #3
 8006f08:	73fb      	strb	r3, [r7, #15]
    break;
 8006f0a:	e002      	b.n	8006f12 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8006f10:	bf00      	nop
  }
  return usb_status;
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	460b      	mov	r3, r1
 8006f26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f36:	78fa      	ldrb	r2, [r7, #3]
 8006f38:	4611      	mov	r1, r2
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fa fdf4 	bl	8001b28 <HAL_PCD_EP_SetStall>
 8006f40:	4603      	mov	r3, r0
 8006f42:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006f44:	7bbb      	ldrb	r3, [r7, #14]
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d816      	bhi.n	8006f78 <USBD_LL_StallEP+0x5c>
 8006f4a:	a201      	add	r2, pc, #4	; (adr r2, 8006f50 <USBD_LL_StallEP+0x34>)
 8006f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f50:	08006f61 	.word	0x08006f61
 8006f54:	08006f67 	.word	0x08006f67
 8006f58:	08006f6d 	.word	0x08006f6d
 8006f5c:	08006f73 	.word	0x08006f73
    case HAL_OK :
      usb_status = USBD_OK;
 8006f60:	2300      	movs	r3, #0
 8006f62:	73fb      	strb	r3, [r7, #15]
    break;
 8006f64:	e00b      	b.n	8006f7e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f66:	2303      	movs	r3, #3
 8006f68:	73fb      	strb	r3, [r7, #15]
    break;
 8006f6a:	e008      	b.n	8006f7e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	73fb      	strb	r3, [r7, #15]
    break;
 8006f70:	e005      	b.n	8006f7e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f72:	2303      	movs	r3, #3
 8006f74:	73fb      	strb	r3, [r7, #15]
    break;
 8006f76:	e002      	b.n	8006f7e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f7c:	bf00      	nop
  }
  return usb_status;
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f94:	2300      	movs	r3, #0
 8006f96:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006fa2:	78fa      	ldrb	r2, [r7, #3]
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fa fe20 	bl	8001bec <HAL_PCD_EP_ClrStall>
 8006fac:	4603      	mov	r3, r0
 8006fae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006fb0:	7bbb      	ldrb	r3, [r7, #14]
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d816      	bhi.n	8006fe4 <USBD_LL_ClearStallEP+0x5c>
 8006fb6:	a201      	add	r2, pc, #4	; (adr r2, 8006fbc <USBD_LL_ClearStallEP+0x34>)
 8006fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbc:	08006fcd 	.word	0x08006fcd
 8006fc0:	08006fd3 	.word	0x08006fd3
 8006fc4:	08006fd9 	.word	0x08006fd9
 8006fc8:	08006fdf 	.word	0x08006fdf
    case HAL_OK :
      usb_status = USBD_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	73fb      	strb	r3, [r7, #15]
    break;
 8006fd0:	e00b      	b.n	8006fea <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	73fb      	strb	r3, [r7, #15]
    break;
 8006fd6:	e008      	b.n	8006fea <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	73fb      	strb	r3, [r7, #15]
    break;
 8006fdc:	e005      	b.n	8006fea <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	73fb      	strb	r3, [r7, #15]
    break;
 8006fe2:	e002      	b.n	8006fea <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	73fb      	strb	r3, [r7, #15]
    break;
 8006fe8:	bf00      	nop
  }
  return usb_status;
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007006:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800700c:	2b00      	cmp	r3, #0
 800700e:	da0b      	bge.n	8007028 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007016:	68f9      	ldr	r1, [r7, #12]
 8007018:	4613      	mov	r3, r2
 800701a:	00db      	lsls	r3, r3, #3
 800701c:	4413      	add	r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	440b      	add	r3, r1
 8007022:	333e      	adds	r3, #62	; 0x3e
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	e00b      	b.n	8007040 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007028:	78fb      	ldrb	r3, [r7, #3]
 800702a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800702e:	68f9      	ldr	r1, [r7, #12]
 8007030:	4613      	mov	r3, r2
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	4413      	add	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	440b      	add	r3, r1
 800703a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800703e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007040:	4618      	mov	r0, r3
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	460b      	mov	r3, r1
 8007056:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007066:	78fa      	ldrb	r2, [r7, #3]
 8007068:	4611      	mov	r1, r2
 800706a:	4618      	mov	r0, r3
 800706c:	f7fa fbf2 	bl	8001854 <HAL_PCD_SetAddress>
 8007070:	4603      	mov	r3, r0
 8007072:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	2b03      	cmp	r3, #3
 8007078:	d816      	bhi.n	80070a8 <USBD_LL_SetUSBAddress+0x5c>
 800707a:	a201      	add	r2, pc, #4	; (adr r2, 8007080 <USBD_LL_SetUSBAddress+0x34>)
 800707c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007080:	08007091 	.word	0x08007091
 8007084:	08007097 	.word	0x08007097
 8007088:	0800709d 	.word	0x0800709d
 800708c:	080070a3 	.word	0x080070a3
    case HAL_OK :
      usb_status = USBD_OK;
 8007090:	2300      	movs	r3, #0
 8007092:	73fb      	strb	r3, [r7, #15]
    break;
 8007094:	e00b      	b.n	80070ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007096:	2303      	movs	r3, #3
 8007098:	73fb      	strb	r3, [r7, #15]
    break;
 800709a:	e008      	b.n	80070ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800709c:	2301      	movs	r3, #1
 800709e:	73fb      	strb	r3, [r7, #15]
    break;
 80070a0:	e005      	b.n	80070ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80070a2:	2303      	movs	r3, #3
 80070a4:	73fb      	strb	r3, [r7, #15]
    break;
 80070a6:	e002      	b.n	80070ae <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80070a8:	2303      	movs	r3, #3
 80070aa:	73fb      	strb	r3, [r7, #15]
    break;
 80070ac:	bf00      	nop
  }
  return usb_status;
 80070ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	607a      	str	r2, [r7, #4]
 80070c2:	603b      	str	r3, [r7, #0]
 80070c4:	460b      	mov	r3, r1
 80070c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80070d6:	7af9      	ldrb	r1, [r7, #11]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	f7fa fce7 	bl	8001aae <HAL_PCD_EP_Transmit>
 80070e0:	4603      	mov	r3, r0
 80070e2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80070e4:	7dbb      	ldrb	r3, [r7, #22]
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d816      	bhi.n	8007118 <USBD_LL_Transmit+0x60>
 80070ea:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <USBD_LL_Transmit+0x38>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	08007101 	.word	0x08007101
 80070f4:	08007107 	.word	0x08007107
 80070f8:	0800710d 	.word	0x0800710d
 80070fc:	08007113 	.word	0x08007113
    case HAL_OK :
      usb_status = USBD_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	75fb      	strb	r3, [r7, #23]
    break;
 8007104:	e00b      	b.n	800711e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007106:	2303      	movs	r3, #3
 8007108:	75fb      	strb	r3, [r7, #23]
    break;
 800710a:	e008      	b.n	800711e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800710c:	2301      	movs	r3, #1
 800710e:	75fb      	strb	r3, [r7, #23]
    break;
 8007110:	e005      	b.n	800711e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007112:	2303      	movs	r3, #3
 8007114:	75fb      	strb	r3, [r7, #23]
    break;
 8007116:	e002      	b.n	800711e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007118:	2303      	movs	r3, #3
 800711a:	75fb      	strb	r3, [r7, #23]
    break;
 800711c:	bf00      	nop
  }
  return usb_status;
 800711e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3718      	adds	r7, #24
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	607a      	str	r2, [r7, #4]
 8007132:	603b      	str	r3, [r7, #0]
 8007134:	460b      	mov	r3, r1
 8007136:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800713c:	2300      	movs	r3, #0
 800713e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007146:	7af9      	ldrb	r1, [r7, #11]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	f7fa fc59 	bl	8001a02 <HAL_PCD_EP_Receive>
 8007150:	4603      	mov	r3, r0
 8007152:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007154:	7dbb      	ldrb	r3, [r7, #22]
 8007156:	2b03      	cmp	r3, #3
 8007158:	d816      	bhi.n	8007188 <USBD_LL_PrepareReceive+0x60>
 800715a:	a201      	add	r2, pc, #4	; (adr r2, 8007160 <USBD_LL_PrepareReceive+0x38>)
 800715c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007160:	08007171 	.word	0x08007171
 8007164:	08007177 	.word	0x08007177
 8007168:	0800717d 	.word	0x0800717d
 800716c:	08007183 	.word	0x08007183
    case HAL_OK :
      usb_status = USBD_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	75fb      	strb	r3, [r7, #23]
    break;
 8007174:	e00b      	b.n	800718e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007176:	2303      	movs	r3, #3
 8007178:	75fb      	strb	r3, [r7, #23]
    break;
 800717a:	e008      	b.n	800718e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800717c:	2301      	movs	r3, #1
 800717e:	75fb      	strb	r3, [r7, #23]
    break;
 8007180:	e005      	b.n	800718e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007182:	2303      	movs	r3, #3
 8007184:	75fb      	strb	r3, [r7, #23]
    break;
 8007186:	e002      	b.n	800718e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8007188:	2303      	movs	r3, #3
 800718a:	75fb      	strb	r3, [r7, #23]
    break;
 800718c:	bf00      	nop
  }
  return usb_status;
 800718e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071aa:	78fa      	ldrb	r2, [r7, #3]
 80071ac:	4611      	mov	r1, r2
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fa fc65 	bl	8001a7e <HAL_PCD_EP_GetRxCount>
 80071b4:	4603      	mov	r3, r0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
	...

080071c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80071cc:	78fb      	ldrb	r3, [r7, #3]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <HAL_PCDEx_LPM_Callback+0x18>
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d01f      	beq.n	8007216 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80071d6:	e03b      	b.n	8007250 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d007      	beq.n	80071f0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80071e0:	f000 f854 	bl	800728c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80071e4:	4b1c      	ldr	r3, [pc, #112]	; (8007258 <HAL_PCDEx_LPM_Callback+0x98>)
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	4a1b      	ldr	r2, [pc, #108]	; (8007258 <HAL_PCDEx_LPM_Callback+0x98>)
 80071ea:	f023 0306 	bic.w	r3, r3, #6
 80071ee:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	6812      	ldr	r2, [r2, #0]
 80071fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007202:	f023 0301 	bic.w	r3, r3, #1
 8007206:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800720e:	4618      	mov	r0, r3
 8007210:	f7fe fae2 	bl	80057d8 <USBD_LL_Resume>
    break;
 8007214:	e01c      	b.n	8007250 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	6812      	ldr	r2, [r2, #0]
 8007224:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007228:	f043 0301 	orr.w	r3, r3, #1
 800722c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007234:	4618      	mov	r0, r3
 8007236:	f7fe fab9 	bl	80057ac <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d005      	beq.n	800724e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007242:	4b05      	ldr	r3, [pc, #20]	; (8007258 <HAL_PCDEx_LPM_Callback+0x98>)
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	4a04      	ldr	r2, [pc, #16]	; (8007258 <HAL_PCDEx_LPM_Callback+0x98>)
 8007248:	f043 0306 	orr.w	r3, r3, #6
 800724c:	6113      	str	r3, [r2, #16]
    break;
 800724e:	bf00      	nop
}
 8007250:	bf00      	nop
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	e000ed00 	.word	0xe000ed00

0800725c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007264:	4b03      	ldr	r3, [pc, #12]	; (8007274 <USBD_static_malloc+0x18>)
}
 8007266:	4618      	mov	r0, r3
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	200001b0 	.word	0x200001b0

08007278 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]

}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007290:	f7f8 ffd0 	bl	8000234 <SystemClock_Config>
}
 8007294:	bf00      	nop
 8007296:	bd80      	pop	{r7, pc}

08007298 <__libc_init_array>:
 8007298:	b570      	push	{r4, r5, r6, lr}
 800729a:	4d0d      	ldr	r5, [pc, #52]	; (80072d0 <__libc_init_array+0x38>)
 800729c:	4c0d      	ldr	r4, [pc, #52]	; (80072d4 <__libc_init_array+0x3c>)
 800729e:	1b64      	subs	r4, r4, r5
 80072a0:	10a4      	asrs	r4, r4, #2
 80072a2:	2600      	movs	r6, #0
 80072a4:	42a6      	cmp	r6, r4
 80072a6:	d109      	bne.n	80072bc <__libc_init_array+0x24>
 80072a8:	4d0b      	ldr	r5, [pc, #44]	; (80072d8 <__libc_init_array+0x40>)
 80072aa:	4c0c      	ldr	r4, [pc, #48]	; (80072dc <__libc_init_array+0x44>)
 80072ac:	f000 f820 	bl	80072f0 <_init>
 80072b0:	1b64      	subs	r4, r4, r5
 80072b2:	10a4      	asrs	r4, r4, #2
 80072b4:	2600      	movs	r6, #0
 80072b6:	42a6      	cmp	r6, r4
 80072b8:	d105      	bne.n	80072c6 <__libc_init_array+0x2e>
 80072ba:	bd70      	pop	{r4, r5, r6, pc}
 80072bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80072c0:	4798      	blx	r3
 80072c2:	3601      	adds	r6, #1
 80072c4:	e7ee      	b.n	80072a4 <__libc_init_array+0xc>
 80072c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ca:	4798      	blx	r3
 80072cc:	3601      	adds	r6, #1
 80072ce:	e7f2      	b.n	80072b6 <__libc_init_array+0x1e>
 80072d0:	08007390 	.word	0x08007390
 80072d4:	08007390 	.word	0x08007390
 80072d8:	08007390 	.word	0x08007390
 80072dc:	08007394 	.word	0x08007394

080072e0 <memset>:
 80072e0:	4402      	add	r2, r0
 80072e2:	4603      	mov	r3, r0
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d100      	bne.n	80072ea <memset+0xa>
 80072e8:	4770      	bx	lr
 80072ea:	f803 1b01 	strb.w	r1, [r3], #1
 80072ee:	e7f9      	b.n	80072e4 <memset+0x4>

080072f0 <_init>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	bf00      	nop
 80072f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f6:	bc08      	pop	{r3}
 80072f8:	469e      	mov	lr, r3
 80072fa:	4770      	bx	lr

080072fc <_fini>:
 80072fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fe:	bf00      	nop
 8007300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007302:	bc08      	pop	{r3}
 8007304:	469e      	mov	lr, r3
 8007306:	4770      	bx	lr
